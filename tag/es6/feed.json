{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"es6\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "title": "JS常用高阶函数",
            "date_published": "2021-06-09T10:00:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"es6高阶函数之filter\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之filter\">#</a> ES6 高阶函数之 filter</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<blockquote>\n<ul>\n<li>通过提供函数实现的依次测试的所有元素，true 则表示通过，如果为 false 则失败。</li>\n<li>返回值是一个新数组，由通过测试为 true 的所有元素组成</li>\n<li>如果没有任何数组元素通过测试，则返回空数组。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>满足条件的留下，是对原数组的过滤。</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>\t必须，遍历到的当前元素值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span> \t可选，当前元素的索引值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">arr</span>\t\t可选，当前元素属于的数组对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h4>\n<h5 id=\"过滤小于100\"><a class=\"markdownIt-Anchor\" href=\"#过滤小于100\">#</a> 过滤小于 100</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">110</span>,<span class=\"number\">60</span>,<span class=\"number\">190</span>,<span class=\"number\">50</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newNums =nums.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt; <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newNums)<span class=\"comment\">//[20,30,60,50]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"返回奇数元素\"><a class=\"markdownIt-Anchor\" href=\"#返回奇数元素\">#</a> 返回奇数元素</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> x%<span class=\"number\">2</span>!==<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;))<span class=\"comment\">//[1,3,5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r,arr= [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;pear&#x27;</span>, <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>];</span><br><span class=\"line\">r=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr.indexOf(value)===index;</span><br><span class=\"line\"><span class=\"comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置相等,表示是同一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置不相等，表示元素重复并且过滤。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);<span class=\"comment\">//[&quot;apple&quot;, &quot;strawberry&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.filter( <span class=\"function\">(<span class=\"params\">element, index, self</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.indexOf( element ) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr2 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr1 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"找出素数\"><a class=\"markdownIt-Anchor\" href=\"#找出素数\">#</a> 找出素数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">20</span>,<span class=\"number\">37</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> result=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">Math</span>.sqrt(value)+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(value%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之map\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之map\">#</a> ES6 高阶函数之 map</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\">#</a> 定义</h4>\n<blockquote>\n<p>原数组中的每个元素依次调用一个指定方法后，</p>\n<p>返回返回值组成的新数组</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>对原数组的加工，返回加工后新数组</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>  数组中正在处理的当前元素。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span>可选  数组中正在处理的当前元素的索引。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">array</span>可选  <span class=\"title\">map</span> 方法被调用的数组。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">thisArg</span>可选 执行 <span class=\"title\">callback</span> 函数时使用的<span class=\"title\">this</span> 值。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\">#</a> 用法</h4>\n<h5 id=\"返回数组元素平方后的新数组\"><a class=\"markdownIt-Anchor\" href=\"#返回数组元素平方后的新数组\">#</a> 返回数组元素平方后的新数组</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>)</span>&#123;  <span class=\"comment\">//定义一个平方函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(pow);  <span class=\"comment\">//map()传入的是函数对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);       <span class=\"comment\">//结果：[1,4,9,16,25,36,49,64,81];</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用给定函数创建新字符串\"><a class=\"markdownIt-Anchor\" href=\"#用给定函数创建新字符串\">#</a> 用给定函数创建新字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapString = <span class=\"function\">(<span class=\"params\">str, fn</span>) =&gt;</span></span><br><span class=\"line\">  str</span><br><span class=\"line\">    .split(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> fn(c, i, str))</span><br><span class=\"line\">    .join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">mapString(<span class=\"string\">&#x27;lorem ipsum&#x27;</span>, <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.toUpperCase()); <span class=\"comment\">// &#x27;LOREM IPSUM&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"把二维数组变字符串\"><a class=\"markdownIt-Anchor\" href=\"#把二维数组变字符串\">#</a> 把二维数组变字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\">(<span class=\"params\">arr, delimiter = <span class=\"string\">&#x27;,&#x27;</span></span>) =&gt;</span></span><br><span class=\"line\">\tarr.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> </span><br><span class=\"line\">\t\t v.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> </span><br><span class=\"line\"> (<span class=\"built_in\">isNaN</span>(x) ? <span class=\"string\">`&quot;<span class=\"subst\">$&#123;x.replace(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&#x27;&quot;&quot;&#x27;</span>)&#125;</span>&quot;`</span> :x)).join(delimiter)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          .join(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"数字序列转为数组删除符号\"><a class=\"markdownIt-Anchor\" href=\"#数字序列转为数组删除符号\">#</a> 数字序列转为数组，删除符号</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> digitize = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [...<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.abs(n)&#125;</span>`</span>].map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(i));</span><br><span class=\"line\">digitize(<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">digitize(-<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"拿到所有图片的图片名称并以数组形式返回\"><a class=\"markdownIt-Anchor\" href=\"#拿到所有图片的图片名称并以数组形式返回\">#</a> 拿到所有图片的图片名称并以数组形式返回</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getImages = <span class=\"function\">(<span class=\"params\">el, includeDuplicates = <span class=\"literal\">false</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> images = [...el.getElementsByTagName(<span class=\"string\">&#x27;img&#x27;</span>)].</span><br><span class=\"line\">  map(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span></span><br><span class=\"line\">    img.getAttribute(<span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> includeDuplicates ? images :</span><br><span class=\"line\">  [...new <span class=\"built_in\">Set</span>(images)];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">true</span>); </span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;image1.png&#x27;, &#x27;...&#x27;]</span></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;...&#x27;] 名字去重</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"vue中重复渲染组件\"><a class=\"markdownIt-Anchor\" href=\"#vue中重复渲染组件\">#</a> vue 中重复渲染组件</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;ele&#x27;</span>,&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">createElement</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">\t\t\t    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">length</span>:<span class=\"number\">5</span></span><br><span class=\"line\">\t\t\t\t&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> createElement(Child);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之reduce\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之reduce\">#</a> ES6 高阶函数之 reduce</h3>\n<h4 id=\"定义-3\"><a class=\"markdownIt-Anchor\" href=\"#定义-3\">#</a> 定义</h4>\n<blockquote>\n<p><strong>原始数组不发生改变</strong></p>\n<p><strong>reduce () 对于空数组是不会执行回调函数的</strong></p>\n</blockquote>\n<h4 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback , [initialValue])</span><br><span class=\"line\"><span class=\"comment\">//callback （执行数组中每个值的函数，包含四个参数）</span></span><br><span class=\"line\"><span class=\"comment\">//initialValue （作为第一次调用 callback 的第一个参数。）</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有提供initialValue，从索引1的地方开始执行callback方法，跳过第一个索引。</span></span><br><span class=\"line\"><span class=\"comment\">//如果提供initialValue，从索引0开始</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"callback-函数\"><a class=\"markdownIt-Anchor\" href=\"#callback-函数\">#</a> callback 函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行数组中每个值的callback 函数，包含四个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;，<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1、<strong>previousValue</strong> ：上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>\n2、<strong>currentValue</strong> ：数组中当前被处理的元素<br>\n 3、<strong>index</strong> ：当前元素在数组中的索引<br>\n 4、<strong>array</strong> ：调用 reduce 函数 的数组</p>\n</blockquote>\n<h4 id=\"高级用法\"><a class=\"markdownIt-Anchor\" href=\"#高级用法\">#</a> 高级用法</h4>\n<h5 id=\"数组求和\"><a class=\"markdownIt-Anchor\" href=\"#数组求和\">#</a> 数组求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">...arr</span>) =&gt;</span> [...arr].reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>);</span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\">sum(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重-2\"><a class=\"markdownIt-Anchor\" href=\"#数组去重-2\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!pre.includes(cur))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"计算两个或多个数字的平均值\"><a class=\"markdownIt-Anchor\" href=\"#计算两个或多个数字的平均值\">#</a> 计算两个或多个数字的平均值</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> average = <span class=\"function\">(<span class=\"params\">...nums</span>) =&gt;</span></span><br><span class=\"line\">  nums.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>) / nums.length;</span><br><span class=\"line\">average(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 2</span></span><br><span class=\"line\">average(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将二维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将二维数组转化为一维\">#</a> 将二维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将多维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将多维数组转化为一维\">#</a> 将多维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]]]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>pre.concat(<span class=\"built_in\">Array</span>.isArray(cur)?newArr(cur):cur),[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr(arr)); <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"对象里的属性求和\"><a class=\"markdownIt-Anchor\" href=\"#对象里的属性求和\">#</a> 对象里的属性求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;math&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;chinese&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;english&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = result.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur.score + prev;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">//60</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"统计数组中每个元素出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#统计数组中每个元素出现的次数\">#</a> 统计数组中每个元素出现的次数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr11 = [<span class=\"number\">111</span>, <span class=\"number\">22</span>, <span class=\"number\">111</span>, <span class=\"number\">234</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">111</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr11.reduce(<span class=\"function\">(<span class=\"params\">pre, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pre[item] = pre[item] ? pre[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//&#123; &#x27;22&#x27;: 1, &#x27;111&#x27;: 3, &#x27;234&#x27;: 1, &#x27;999&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tiff&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nameNum = names.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(cur <span class=\"keyword\">in</span> pre)&#123;</span><br><span class=\"line\">    pre[cur]++</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    pre[cur] = <span class=\"number\">1</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;,&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nameNum); <span class=\"comment\">//&#123;Alice: 2, Bob: 1, Tiff: 1, Bruce: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之sort\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之sort\">#</a> ES6 高阶函数之 sort</h3>\n<h4 id=\"定义-4\"><a class=\"markdownIt-Anchor\" href=\"#定义-4\">#</a> 定义</h4>\n<blockquote>\n<p><code>sort() </code> 方法用原地算法对数组的元素进行排序，并返回数组，</p>\n<p>该排序方法会在原数组上直接进行排序，并<strong>不会生成一个排好序的新数组</strong>。</p>\n<p>排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<h4 id=\"语法-4\"><a class=\"markdownIt-Anchor\" href=\"#语法-4\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.sort(sortby)</span><br><span class=\"line\"><span class=\"comment\">//sort() 在没有参数时，返回的结果是按升序来排列的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortby\t可选。规定排序顺序。必须是函数。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>function(a, b)(return a- b)</strong></p>\n<ul>\n<li>如果指明了参数：compare (a, b) ，（a, b 是两个要比较的元素，a 在 b 前面）那么数组会按照该函数的返回值排序</li>\n<li>如果 compare (a, b) 返回值 &lt; 0 ，a 会被排列到 b 之前，即参数 a, b 的顺序保存原样；</li>\n<li>如果 compare (a, b) 返回值 = 0 ，a 和 b 的相对位置不变。（ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守）</li>\n<li>如果 compare (a, b) 返回值 &gt; 0 ，b 会被排列到 a 之前。即交换参数 a, b 的顺序</li>\n</ul>\n</blockquote>\n<h4 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\">#</a> 用法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sortby= <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> koala=[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].sort(sortby)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(koala);</span><br><span class=\"line\"><span class=\"comment\">// [1 , 2 , 10 , 20]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义高阶函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义高阶函数\">#</a> 自定义高阶函数</h3>\n<h4 id=\"字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\"><a class=\"markdownIt-Anchor\" href=\"#字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\">#</a> 字符串数组转换为整数数组，每个元素代表原始数组中字符串的长度。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strArray=[<span class=\"string\">&#x27;JavaScript&#x27;</span>,<span class=\"string\">&#x27;PHP&#x27;</span>,<span class=\"string\">&#x27;JAVA&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapForEach</span>(<span class=\"params\">arr,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newArray = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        newArray.push(&#123;</span><br><span class=\"line\">            fn(arr[i])</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lenArray = mapForEach(strArray,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.length;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lenArray);<span class=\"comment\">//[10,3,4,1,6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>代码分析</strong></p>\n<ul>\n<li>创建了一个高阶函数 mapForEach ，它接受一个数组和一个回调函数 fn。</li>\n<li>它循环遍历传入的数组，并在每次迭代时在 newArray.push 方法调用回调函数 fn 。</li>\n<li>回调函数 fn 接收数组的当前元素并返回该元素的长度，该元素存储在 newArray 中。</li>\n<li>for 循环完成后，newArray 被返回并赋值给 lenArray。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "JS",
                "ES6",
                "高阶函数"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "title": "JS代码片段之数组20-50",
            "date_published": "2021-06-09T09:02:30.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"js代码片段之数组20-60\"><a class=\"markdownIt-Anchor\" href=\"#js代码片段之数组20-60\">#</a> JS 代码片段之数组 20-60</h3>\n<h4 id=\"检查数组是否满足条件\"><a class=\"markdownIt-Anchor\" href=\"#检查数组是否满足条件\">#</a> 检查数组是否满足条件</h4>\n<blockquote>\n<p>every () 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p>\n<p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>\n如果所有元素都满足条件，则返回 true。</p>\n<p><strong>every () 不会改变原始数组</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ages.every(checkAdult);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueElements = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\">uniqueElements([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组合并兼去重\"><a class=\"markdownIt-Anchor\" href=\"#数组合并兼去重\">#</a> 数组合并兼去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> union = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...a, ...b]));</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查是否是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#检查是否是为等值的数组\">#</a> 检查是否是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqual = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val === arr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// false</span></span><br><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入之后是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入之后是为等值的数组\">#</a> 判断数组（四舍五入）之后是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqualBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;  <span class=\"keyword\">const</span> eql = fn(arr[<span class=\"number\">0</span>]);  <span class=\"keyword\">return</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> fn(val) === eql);&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">1.3</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.6</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组的值是否重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组的值是否重复\">#</a> 判断数组的值是否重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUnique = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入后是否有值重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入后是否有值重复\">#</a> 判断数组（四舍五入）后是否有值重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUniqueBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr.map(fn)).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.4</span>, <span class=\"number\">2.9</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">2.4</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回原始数组元素调用函数处理后的值  </span></span><br><span class=\"line\">&#125;, thisArg)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>callback 生成新数组元素的函数，使用三个参数：<br>\ncurrentValue  数组中正在处理的当前元素。<br>\nindex 可选  \t数组中正在处理的当前元素的索引。<br>\narray 可选  \tmap 方法被调用的数组。<br>\nthisArg 可选 \t执行 callback 函数时使用的 this 值。<br>\n<strong>不会对空数组进行检测， map () 不会改变原始数组。</strong></p>\n</blockquote>\n<h4 id=\"判断数组是否满足要求\"><a class=\"markdownIt-Anchor\" href=\"#判断数组是否满足要求\">#</a> 判断数组是否满足要求</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> someany = <span class=\"function\">(<span class=\"params\">arr, fn = <span class=\"built_in\">Boolean</span></span>) =&gt;</span> arr.some(fn);<span class=\"comment\">//是否有一个满足要求</span></span><br><span class=\"line\"><span class=\"comment\">// const any = (arr, fn = Boolean) =&gt; arr.every(fn);//每一个是否满足要求</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = someany([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>], <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &gt;= <span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = someany([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分割数组\"><a class=\"markdownIt-Anchor\" href=\"#分割数组\">#</a> 分割数组</h4>\n<blockquote>\n<p><code>arrayObject.slice(start,end)</code> ，slice () 方法可从已有的数组中返回选定的元素，</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> aperture = <span class=\"function\">(<span class=\"params\">n, arr</span>) =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//n表示分割成多长的数组</span></span><br><span class=\"line\">     n &gt; arr.length ? [] :arr.slice(n - <span class=\"number\">1</span>).map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> arr.slice(i, i + n));<span class=\"comment\">//v是当前值，i当前索引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"> aperture(<span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [[1, 2], [2, 3], [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(3, [1, 2, 3, 4]); // [[1, 2, 3], [2, 3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(5, [1, 2, 3, 4]); // []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"转为数组\"><a class=\"markdownIt-Anchor\" href=\"#转为数组\">#</a> 转为数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> castArray = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(val) ? val : [val]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"从数组中删除假值\"><a class=\"markdownIt-Anchor\" href=\"#从数组中删除假值\">#</a> 从数组中删除假值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(item);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compact = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> * <span class=\"number\">23</span>, <span class=\"literal\">NaN</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">34</span>]); </span><br><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3, &#x27;a&#x27;, &#x27;s&#x27;, 34 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"求一个值在数组出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#求一个值在数组出现的次数\">#</a> 求一个值在数组出现的次数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCount = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span> arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v === val ? a + <span class=\"number\">1</span> : a), <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中最频繁的元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中最频繁的元素\">#</a> 返回数组中最频繁的元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mostFrequent = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.entries(</span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      a[v] = a[v] ? a[v] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\">  ).reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v[<span class=\"number\">1</span>] &gt;= a[<span class=\"number\">1</span>] ? v : a), [<span class=\"literal\">null</span>, <span class=\"number\">0</span>])[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">mostFrequent([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分辨两个数组的区别不去重\"><a class=\"markdownIt-Anchor\" href=\"#分辨两个数组的区别不去重\">#</a> 分辨两个数组的区别（不去重）</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> difference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !s.has(x));</span><br><span class=\"line\">&#125;;<span class=\"comment\">//找到a数组中b数组中没有的值</span></span><br><span class=\"line\">difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 3]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueSymmetricDifference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> </span><br><span class=\"line\">[  </span><br><span class=\"line\">    ...new <span class=\"built_in\">Set</span>([    </span><br><span class=\"line\">    ...a.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !b.includes(v)),    </span><br><span class=\"line\">    ...b.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !a.includes(v)), </span><br><span class=\"line\">\t]),</span><br><span class=\"line\">];</span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组的后n个元素\"><a class=\"markdownIt-Anchor\" href=\"#删除数组的后n个元素\">#</a> 删除数组的后 n 个元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去除数组最后一个值 const del = arr =&gt; arr.slice(0, -1);</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dropRight = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> arr.slice(<span class=\"number\">0</span>, -n);</span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">42</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组元素直到满足函数\"><a class=\"markdownIt-Anchor\" href=\"#删除数组元素直到满足函数\">#</a> 删除数组元素直到满足函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dropRightWhile = <span class=\"function\">(<span class=\"params\">arr, func</span>) =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightIndex = arr.length;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rightIndex-- &amp;&amp; !func(arr[rightIndex]));  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, rightIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从右往左直到索引大于3</span></span><br><span class=\"line\">dropWhile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n &gt;= <span class=\"number\">3</span>); <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除第一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除第一个元素以外的所有元素\">#</a> 返回数组中除第一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tail = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> (arr.length &gt; <span class=\"number\">1</span> ? arr.slice(<span class=\"number\">1</span>) : arr);</span><br><span class=\"line\">tail([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">tail([<span class=\"number\">1</span>]); <span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除最后一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除最后一个元素以外的所有元素\">#</a> 返回数组中除最后一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initial = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">initial([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中每个n元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中每个n元素\">#</a> 返回数组中每个 “n” 元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> everyNth = <span class=\"function\">(<span class=\"params\">arr, nth</span>) =&gt;</span> arr.filter(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> i % nth === nth - <span class=\"number\">1</span>);</span><br><span class=\"line\">everyNth([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成n位斐波那契数组\"><a class=\"markdownIt-Anchor\" href=\"#生成n位斐波那契数组\">#</a> 生成 n 位斐波那契数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;).reduce(</span><br><span class=\"line\">   <span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class=\"number\">1</span> ? acc[i - <span class=\"number\">1</span>] + acc[i - <span class=\"number\">2</span>] : i),[])</span><br><span class=\"line\">fibonacci(<span class=\"number\">6</span>); <span class=\"comment\">// [0, 1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定个数的随机数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定个数的随机数组\">#</a> 生成指定个数的随机数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateItems = <span class=\"function\">(<span class=\"params\">n, fn</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;, <span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> fn(i));</span><br><span class=\"line\">generateItems(<span class=\"number\">10</span>, <span class=\"built_in\">Math</span>.random);</span><br><span class=\"line\"><span class=\"comment\">// [0.21, 0.08, 0.40, 0.96, 0.96, 0.24, 0.19, 0.96, 0.42, 0.70]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在数组的指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#在数组的指定位置插入多个值返回新数组\">#</a> 在数组的指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arrayObject.splice(index,howmany,item1,.....,itemX)</span></span><br><span class=\"line\"><span class=\"comment\">// index\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span></span><br><span class=\"line\"><span class=\"comment\">// howmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。</span></span><br><span class=\"line\"><span class=\"comment\">// item1, ..., itemX\t可选。向数组添加的新项目。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> insertAt = <span class=\"function\">(<span class=\"params\">arr, i, ...v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  arr.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, ...v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">insertAt(myArray, <span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// myArray = [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherArray = [<span class=\"number\">2</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">insertAt(otherArray, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>); <span class=\"comment\">// otherArray = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#指定位置插入多个值返回新数组\">#</a> 指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shank = <span class=\"function\">(<span class=\"params\">arr, index = <span class=\"number\">0</span>, delCount = <span class=\"number\">0</span>, ...elements</span>) =&gt;</span></span><br><span class=\"line\">  arr</span><br><span class=\"line\">    .slice(<span class=\"number\">0</span>, index)</span><br><span class=\"line\">    .concat(elements)</span><br><span class=\"line\">    .concat(arr.slice(index + delCount));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;alpha&#x27;</span>, <span class=\"string\">&#x27;bravo&#x27;</span>, <span class=\"string\">&#x27;charlie&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> namesAndDelta = shank(names, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;delta&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;delta&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> namesNoBravo = shank(names, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names); <span class=\"comment\">// [&#x27;alpha&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数组将生成的数组中的元素解组\"><a class=\"markdownIt-Anchor\" href=\"#创建数组将生成的数组中的元素解组\">#</a> 创建数组，将生成的数组中的元素解组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unzip = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> (val.forEach(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> acc[i].push(v)), acc),</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">      <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.max(...arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.length))</span><br><span class=\"line\">    &#125;).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [])</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>, <span class=\"literal\">false</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true, false]]</span></span><br><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对提供的数组元素排列组合并生成新数组\"><a class=\"markdownIt-Anchor\" href=\"#对提供的数组元素排列组合并生成新数组\">#</a> 对提供的数组元素排列组合并生成新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xProd = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span></span><br><span class=\"line\">  a.reduce(<span class=\"function\">(<span class=\"params\">acc, x</span>) =&gt;</span> acc.concat(b.map(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> [x, y])), []);</span><br><span class=\"line\">xProd([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// [[1, &#x27;a&#x27;], [1, &#x27;b&#x27;], [2, &#x27;a&#x27;], [2, &#x27;b&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用迭代器函数和初始值构建数组\"><a class=\"markdownIt-Anchor\" href=\"#使用迭代器函数和初始值构建数组\">#</a> 使用迭代器函数和初始值构建数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unfold = <span class=\"function\">(<span class=\"params\">fn, seed</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [],</span><br><span class=\"line\">    val = [<span class=\"literal\">null</span>, seed];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((val = fn(val[<span class=\"number\">1</span>]))) result.push(val[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> (n &gt; <span class=\"number\">50</span> ? <span class=\"literal\">false</span> : [-n, n + <span class=\"number\">10</span>]);</span><br><span class=\"line\">unfold(f, <span class=\"number\">10</span>); <span class=\"comment\">// [-10, -20, -30, -40, -50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象或其他迭代器-创建键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#对象或其他迭代器-创建键值对数组\">#</a> 对象或其他迭代器 创建键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toPairs = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span></span><br><span class=\"line\">  obj[<span class=\"built_in\">Symbol</span>.iterator] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span> &amp;&amp; obj.entries <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Array</span>.from(obj.entries())</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.entries(obj);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toPairs(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]</span></span><br><span class=\"line\">toPairs([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>]); <span class=\"comment\">// [[0, 2], [1, 4], [2, 8]]</span></span><br><span class=\"line\">toPairs(<span class=\"string\">&#x27;shy&#x27;</span>); <span class=\"comment\">// [[&#x27;0&#x27;, &#x27;s&#x27;], [&#x27;1&#x27;, &#x27;h&#x27;], [&#x27;2&#x27;, &#x27;y&#x27;]]</span></span><br><span class=\"line\">toPairs(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>])); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;a&#x27;], [&#x27;b&#x27;, &#x27;b&#x27;], [&#x27;c&#x27;, &#x27;c&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hsl-值转数组\"><a class=\"markdownIt-Anchor\" href=\"#hsl-值转数组\">#</a> hsl 值转数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toHSLArray = <span class=\"function\"><span class=\"params\">hslStr</span> =&gt;</span> hslStr.match(<span class=\"regexp\">/\\d+/g</span>).map(<span class=\"built_in\">Number</span>);</span><br><span class=\"line\">toHSLArray(<span class=\"string\">&#x27;hsl(50, 10%, 10%)&#x27;</span>); <span class=\"comment\">// [50, 10, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回出现在两个数组中的元素数组\"><a class=\"markdownIt-Anchor\" href=\"#返回出现在两个数组中的元素数组\">#</a> 返回出现在两个数组中的元素数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> similarity = <span class=\"function\">(<span class=\"params\">arr, values</span>) =&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> values.includes(v));</span><br><span class=\"line\">similarity([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打乱数组顺序\"><a class=\"markdownIt-Anchor\" href=\"#打乱数组顺序\">#</a> 打乱数组顺序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shuffle = <span class=\"function\">(<span class=\"params\">[...arr]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> i = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * m--);</span><br><span class=\"line\">    [arr[m], arr[i]] = [arr[i], arr[m]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">shuffle(foo); <span class=\"comment\">// [2, 3, 1], foo = [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"随机得到数组中的值\"><a class=\"markdownIt-Anchor\" href=\"#随机得到数组中的值\">#</a> 随机得到数组中的值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sample = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * arr.length)];</span><br><span class=\"line\">sample([<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>]); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"筛选不满足要求的数组值\"><a class=\"markdownIt-Anchor\" href=\"#筛选不满足要求的数组值\">#</a> 筛选不满足要求的数组值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">pred, array</span>) =&gt;</span> array.filter(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> !pred(...args));</span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 3, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.length &gt; <span class=\"number\">4</span>, [<span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"string\">&#x27;Pear&#x27;</span>, <span class=\"string\">&#x27;Kiwi&#x27;</span>, <span class=\"string\">&#x27;Banana&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;Pear&#x27;, &#x27;Kiwi&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定范围内的n个随机整数数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定范围内的n个随机整数数组\">#</a> 生成指定范围内的 “n” 个随机整数数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomIntArrayInRange = <span class=\"function\">(<span class=\"params\">min, max, n = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(</span><br><span class=\"line\">    &#123; <span class=\"attr\">length</span>: n &#125;,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">randomIntArrayInRange(<span class=\"number\">12</span>, <span class=\"number\">35</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\"><span class=\"comment\">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象数组转换为与指定的key对应的值数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象数组转换为与指定的key对应的值数组\">#</a> 将对象数组转换为与指定的 “key” 对应的值数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pluck = <span class=\"function\">(<span class=\"params\">arr, key</span>) =&gt;</span> arr.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i[key]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> simpsons = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisa&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;homer&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">36</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;marge&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;bart&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">pluck(simpsons, <span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// [8, 36, 34, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象创建为键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象创建为键值对数组\">#</a> 将对象创建为键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectToEntries = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"built_in\">Object</span>.keys(obj).map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class=\"line\">objectToEntries(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [ [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2] ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组转键值对的对象\"><a class=\"markdownIt-Anchor\" href=\"#数组转键值对的对象\">#</a> 数组转键值对的对象</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectFromPairs = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">a, [key, val]</span>) =&gt;</span> ((a[key] = val), a), &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">objectFromPairs([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最小元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最小元素\">#</a> 从提供的数组返回 “n” 个最小元素。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b).slice(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最大元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最大元素\">#</a> 从提供的数组返回 “n” 个最大元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a).slice(<span class=\"number\">0</span>, n);</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并数组并排序\"><a class=\"markdownIt-Anchor\" href=\"#合并数组并排序\">#</a> 合并数组并排序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mergeSortedArrays = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _a = [...a],</span><br><span class=\"line\">    _b = [...b];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: _a.length + _b.length &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_a.length) <span class=\"keyword\">return</span> _b.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_b.length) <span class=\"keyword\">return</span> _a.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> _a[<span class=\"number\">0</span>] &gt; _b[<span class=\"number\">0</span>] ? _b.shift() : _a.shift();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mergeSortedArrays([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"查找数组中指定值的所有索引\"><a class=\"markdownIt-Anchor\" href=\"#查找数组中指定值的所有索引\">#</a> 查找数组中指定值的所有索引</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexOfAll = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">acc, el, i</span>) =&gt;</span> (el === val ? [...acc, i] : acc), []);</span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>); <span class=\"comment\">// [0, 3]</span></span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建等比数组\"><a class=\"markdownIt-Anchor\" href=\"#创建等比数组\">#</a> 创建等比数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> equalRatioArr = <span class=\"function\">(<span class=\"params\">end, start = <span class=\"number\">1</span>, step = <span class=\"number\">2</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.log(end / start) / <span class=\"built_in\">Math</span>.log(step)) + <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;).map(<span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> start * step ** i);</span><br><span class=\"line\"></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>); <span class=\"comment\">// [1, 2, 4, 8, 16, 32, 64, 128, 256]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [3, 6, 12, 24, 48, 96, 192]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>); <span class=\"comment\">// [1, 4, 16, 64, 256]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将数组展平到指定的深度\"><a class=\"markdownIt-Anchor\" href=\"#将数组展平到指定的深度\">#</a> 将数组展平到指定的深度</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, depth = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span></span><br><span class=\"line\">      a.concat(depth &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Array</span>.isArray(v) ? flatten(v, depth - <span class=\"number\">1</span>) : v),</span><br><span class=\"line\">    []</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>], <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">6</span>], <span class=\"number\">7</span>], <span class=\"number\">8</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2, 3, [4, 5], 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"找到满足条件的指定n个值\"><a class=\"markdownIt-Anchor\" href=\"#找到满足条件的指定n个值\">#</a> 找到满足条件的指定 n 个值</h4>\n<h4 id=\"从前往后\"><a class=\"markdownIt-Anchor\" href=\"#从前往后\">#</a> 从前往后</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findFirstN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.push(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从后往前\"><a class=\"markdownIt-Anchor\" href=\"#从后往前\">#</a> 从后往前</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findLastN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.unshift(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [4, 6]</span></span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "ES6",
                "数组"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/06/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%97%B6%E9%97%B40-20/",
            "url": "https://codingfxj.github.io/2021/06/06/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%97%B6%E9%97%B40-20/",
            "title": "JS代码片段之时间0-20",
            "date_published": "2021-06-06T03:57:47.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"js代码片段之时间0-20\"><a class=\"markdownIt-Anchor\" href=\"#js代码片段之时间0-20\">#</a> JS 代码片段之时间 0-20</h3>\n<h4 id=\"1date对象拿到转为hhmmss格式的时间\"><a class=\"markdownIt-Anchor\" href=\"#1date对象拿到转为hhmmss格式的时间\">#</a> 1.Date 对象拿到转为 HH:MM:SS` 格式的时间</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getFromDate = <span class=\"function\"><span class=\"params\">date</span> =&gt;</span> date.toTimeString().slice(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">getFromDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()); <span class=\"comment\">// &#x27;08:38:00&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2推算n天前的日期\"><a class=\"markdownIt-Anchor\" href=\"#2推算n天前的日期\">#</a> 2. 推算 n 天前的日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> daysAgo = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  d.setDate(d.getDate() - <span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daysAgo(<span class=\"number\">20</span>); <span class=\"comment\">// 2020-09-16 (if current date is 2020-10-06)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>判断 dateA 是不是在 dateB 后</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isAfterDate = <span class=\"function\">(<span class=\"params\">dateA, dateB</span>) =&gt;</span> dateA &gt; dateB;</span><br><span class=\"line\">isAfterDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"推算n天后的日期\"><a class=\"markdownIt-Anchor\" href=\"#推算n天后的日期\">#</a> 推算 n 天后的日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> daysFromNow = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  d.setDate(d.getDate() + <span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daysFromNow(<span class=\"number\">5</span>); <span class=\"comment\">// 2020-10-13 (if current date is 2020-10-08)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3按天数推算日期\"><a class=\"markdownIt-Anchor\" href=\"#3按天数推算日期\">#</a> 3. 按天数推算日期</h4>\n<p>从给定日期计算，距离当前日期 <code>n</code>  天的日期，返回其字符串表示形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addDaysToDate = <span class=\"function\">(<span class=\"params\">date, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">          d.setDate(d.getDate() + n);</span><br><span class=\"line\">      </span><br><span class=\"line\">        \t<span class=\"built_in\">console</span>.log(d);<span class=\"comment\">//Wed Nov 04 2020 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(d.toISOString());<span class=\"comment\">//2020-11-04T00:00:00.000Z</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>));<span class=\"comment\">//[&quot;2020-11-04&quot;, &quot;00:00:00.000Z&quot;]</span></span><br><span class=\"line\">      </span><br><span class=\"line\">          <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(addDaysToDate(<span class=\"string\">&#x27;2020-10-15&#x27;</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// &#x27;2020-10-25&#x27;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(addDaysToDate(<span class=\"string\">&#x27;2020-10-15&#x27;</span>, -<span class=\"number\">10</span>)); <span class=\"comment\">// &#x27;2020-10-05&#x27;</span></span><br><span class=\"line\">       </span><br></pre></td></tr></table></figure>\n<h4 id=\"4按分钟推算时间\"><a class=\"markdownIt-Anchor\" href=\"#4按分钟推算时间\">#</a> 4. 按分钟推算时间</h4>\n<p>从给定日期计算  <code>n</code>  分钟的日期，返回其字符串表示形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addMinutesToDate = <span class=\"function\">(<span class=\"params\">date, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">              <span class=\"keyword\">var</span> dd = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.getTime() + n * <span class=\"number\">60000</span>);</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(dd);<span class=\"comment\">//Mon Oct 19 2020 01:10:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(dd.toISOString());<span class=\"comment\">//2020-10-18T17:10:00.000Z</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> dd.toISOString().split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(addMinutesToDate(<span class=\"string\">&#x27;2020-10-19 1:00:00&#x27;</span>, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"5计算加上七个工作日后的日期\"><a class=\"markdownIt-Anchor\" href=\"#5计算加上七个工作日后的日期\">#</a> 5. 计算加上七个工作日后的日期</h4>\n<p>Array.from () 方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addWeekDays = <span class=\"function\">(<span class=\"params\">startDate, count</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: count &#125;).reduce(<span class=\"function\"><span class=\"params\">date</span> =&gt;</span> &#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.setDate(date.getDate() + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (date.getDay() % <span class=\"number\">6</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">      date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.setDate(date.getDate() + (date.getDay() / <span class=\"number\">6</span> + <span class=\"number\">1</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">  &#125;, startDate);</span><br></pre></td></tr></table></figure>\n<h4 id=\"6计算两个日期之间的工作日\"><a class=\"markdownIt-Anchor\" href=\"#6计算两个日期之间的工作日\">#</a> 6. 计算两个日期之间的工作日。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> countWeekDaysBetween = <span class=\"function\">(<span class=\"params\">startDate, endDate</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: (endDate - startDate) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span> * <span class=\"number\">24</span>) &#125;).reduce(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (startDate.getDay() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>) count++;</span><br><span class=\"line\">      startDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(startDate.setDate(startDate.getDate() + <span class=\"number\">1</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">countWeekDaysBetween(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 05, 2020&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 06, 2020&#x27;</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\">countWeekDaysBetween(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 05, 2020&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 14, 2020&#x27;</span>)); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"7返回当前星期几\"><a class=\"markdownIt-Anchor\" href=\"#7返回当前星期几\">#</a> 7. 返回当前星期几</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currentURL = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(currentURL());;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> dayName = <span class=\"function\">(<span class=\"params\">date, locale</span>) =&gt;</span></span><br><span class=\"line\">           date.toLocaleDateString(locale, &#123;</span><br><span class=\"line\">               <span class=\"attr\">weekday</span>: <span class=\"string\">&#x27;long&#x27;</span></span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(dayName(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));; <span class=\"comment\">// &#x27;Saturday&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"8求某一天在一年中是第几天\"><a class=\"markdownIt-Anchor\" href=\"#8求某一天在一年中是第几天\">#</a> 8. 求某一天在一年中是第几天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dayOfYear = <span class=\"function\"><span class=\"params\">date</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor((date - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.getFullYear(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>);</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(dayOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));</span><br></pre></td></tr></table></figure>\n<h4 id=\"9计算两个日期相隔多少天\"><a class=\"markdownIt-Anchor\" href=\"#9计算两个日期相隔多少天\">#</a> 9. 计算两个日期相隔多少天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getDaysDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span> * <span class=\"number\">24</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDaysDiffBetweenDates(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-13&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-22&#x27;</span>)); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"10计算两个日期相隔多少月\"><a class=\"markdownIt-Anchor\" href=\"#10计算两个日期相隔多少月\">#</a> 10. 计算两个日期相隔多少月</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getMonthsDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.max(</span><br><span class=\"line\">    (dateFinal.getFullYear() - dateInitial.getFullYear()) * <span class=\"number\">12</span> +</span><br><span class=\"line\">      dateFinal.getMonth() -</span><br><span class=\"line\">      dateInitial.getMonth(),</span><br><span class=\"line\">    <span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMonthsDiffBetweenDates(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-13&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2018-04-29&#x27;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"11计算两个时间相隔多少小时\"><a class=\"markdownIt-Anchor\" href=\"#11计算两个时间相隔多少小时\">#</a> 11. 计算两个时间相隔多少小时</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getHoursDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHoursDiffBetweenDates(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 10:25:00&#x27;</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-25 10:25:00&#x27;</span>)</span><br><span class=\"line\">); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"12计算相隔多少分钟\"><a class=\"markdownIt-Anchor\" href=\"#12计算相隔多少分钟\">#</a> 12. 计算相隔多少分钟</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getMinutesDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMinutesDiffBetweenDates(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 01:00:15&#x27;</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 02:00:15&#x27;</span>)</span><br><span class=\"line\">); <span class=\"comment\">// 60</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"13判断是否为闰年\"><a class=\"markdownIt-Anchor\" href=\"#13判断是否为闰年\">#</a> 13. 判断是否为闰年</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isLeapYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, <span class=\"number\">1</span>, <span class=\"number\">29</span>).getMonth() === <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isLeapYear(<span class=\"number\">2019</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isLeapYear(<span class=\"number\">2020</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"14判断是否为同一天\"><a class=\"markdownIt-Anchor\" href=\"#14判断是否为同一天\">#</a> 14. 判断是否为同一天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSameDate = <span class=\"function\">(<span class=\"params\">dateA, dateB</span>) =&gt;</span></span><br><span class=\"line\">  dateA.toISOString() === dateB.toISOString();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isSameDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"15判断今天是否为工作日\"><a class=\"markdownIt-Anchor\" href=\"#15判断今天是否为工作日\">#</a> 15. 判断今天是否为工作日</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDay() 方法可返回一周（<span class=\"number\">0</span>~<span class=\"number\">6</span>）的某一天的数字。</span><br><span class=\"line\"></span><br><span class=\"line\">注意： 星期天为 <span class=\"number\">0</span>, 星期一为 <span class=\"number\">1</span>, 以此类推。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isWeekday = <span class=\"function\">(<span class=\"params\">d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> d.getDay() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">isWeekday(); </span><br></pre></td></tr></table></figure>\n<h4 id=\"16判断今天是否为周末\"><a class=\"markdownIt-Anchor\" href=\"#16判断今天是否为周末\">#</a> 16. 判断今天是否为周末</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isWeekend = <span class=\"function\">(<span class=\"params\">d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> d.getDay() % <span class=\"number\">6</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">isWeekend();</span><br></pre></td></tr></table></figure>\n<h4 id=\"17返回最小日期\"><a class=\"markdownIt-Anchor\" href=\"#17返回最小日期\">#</a> 17. 返回最小日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minDate = <span class=\"function\">(<span class=\"params\">...dates</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Math</span>.min(...dates));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dates = [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\">minDate(...dates); <span class=\"comment\">// 2016-01-08T22:00:00.000Z</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"18返回提供的日期所属的季度和年份\"><a class=\"markdownIt-Anchor\" href=\"#18返回提供的日期所属的季度和年份\">#</a> 18. 返回提供的日期所属的季度和年份</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"keyword\">const</span> quarterOfYear = <span class=\"function\">(<span class=\"params\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> [  <span class=\"built_in\">Math</span>.ceil((date.getMonth() + <span class=\"number\">1</span>) / <span class=\"number\">3</span>),  date.getFullYear()];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quarterOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;07/10/2018&#x27;</span>)); <span class=\"comment\">// [ 3, 2018 ]</span></span><br><span class=\"line\">quarterOfYear(); <span class=\"comment\">// [ 4, 2020 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"19返回明天日期的字符串\"><a class=\"markdownIt-Anchor\" href=\"#19返回明天日期的字符串\">#</a> 19. 返回明天日期的字符串。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tomorrow = <span class=\"function\">() =&gt;</span> &#123;  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  d.setDate(d.getDate() + <span class=\"number\">1</span>);  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tomorrow(); </span><br></pre></td></tr></table></figure>\n<h4 id=\"20检查是否可以创建有效的日期对象\"><a class=\"markdownIt-Anchor\" href=\"#20检查是否可以创建有效的日期对象\">#</a> 20. 检查是否可以创建有效的日期对象。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDateValid = <span class=\"function\">(<span class=\"params\">...val</span>) =&gt;</span> !<span class=\"built_in\">Number</span>.isNaN(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(...val).valueOf());</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//valueOf()函数返回指定对象的原始值。</span></span><br><span class=\"line\"><span class=\"comment\">//date.valueOf()返回date时间距1970年1月1日午夜的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">//isNaN() 函数用于检查其参数是否是非数字值。</span></span><br><span class=\"line\"></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;December 17, 1995 03:24:00&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;1995-12-17T03:24:00&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;1995-12-17 T03:24:00&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;johnblac&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(<span class=\"number\">1995</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"number\">1995</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"string\">&#x27;lanen&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(&#123;&#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "ES6",
                "时间"
            ]
        }
    ]
}