{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"手写高阶函数\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/07/04/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E6%96%B9%E6%B3%95/",
            "url": "https://codingfxj.github.io/2021/07/04/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E6%96%B9%E6%B3%95/",
            "title": "手写常用高阶函数",
            "date_published": "2021-07-04T15:19:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"手写map\"><a class=\"markdownIt-Anchor\" href=\"#手写map\">#</a> 手写 map</h3>\n<p><strong>简单写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"> <span class=\"comment\">//es6map</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = arr1.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">//手写map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mymap</span>(<span class=\"params\">arr, mapCallback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(arr) || !arr.length || <span class=\"keyword\">typeof</span> mapCallback !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            result.push(mapCallback(arr[i], i, arr))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = mymap(arr1, <span class=\"function\">(<span class=\"params\">item, i, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n<p><strong>完整写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">6</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\">//写在数组原型链上</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> (fn + <span class=\"string\">&#x27; is not a function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultArr = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; currentArr.length; i++) &#123;</span><br><span class=\"line\">        resultArr[i] = fn.call(thisArg, currentArr[i], i, currentArr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(thisArg);<span class=\"comment\">//[6, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用手写map函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr1.myMap(<span class=\"function\">(<span class=\"params\">item, index, arr1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">100</span></span><br><span class=\"line\">&#125;, arr4)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不对空数组操作</span></span><br><span class=\"line\">[].myMap(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\"> &#125;) <span class=\"comment\">//[]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写filter\"><a class=\"markdownIt-Anchor\" href=\"#手写filter\">#</a> 手写 filter</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">Array</span>.prototype.myfilter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> (fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resArray = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curArray = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; curArray.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn.call(thisArg, curArray[i], i, curArray)) &#123;</span><br><span class=\"line\">            resArray.push(curArray[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resArray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">arr1 = [<span class=\"number\">111</span>, <span class=\"number\">22</span>, <span class=\"number\">234</span>, <span class=\"number\">999</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr6 = arr1.myfilter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr6: &#x27;</span>, arr6);<span class=\"comment\">//[234,999]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写reduce\"><a class=\"markdownIt-Anchor\" href=\"#手写reduce\">#</a> 手写 reduce</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 手写rudece</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myreduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, initValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initIndex</span><br><span class=\"line\">    <span class=\"keyword\">let</span> acc</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thisArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">//有无初始值</span></span><br><span class=\"line\">    acc = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span> ? thisArr[<span class=\"number\">0</span>] : initValue</span><br><span class=\"line\">    initIndex = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//数组是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thisArr.length == <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Reduce of empty array with no initial value&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = initIndex; i &lt; thisArr.length; i++) &#123;</span><br><span class=\"line\">        acc = fn(acc, thisArr[i], i, thisArr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr22 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> count = arr22.myreduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre + cur</span><br><span class=\"line\">&#125;) \t\t<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写some\"><a class=\"markdownIt-Anchor\" href=\"#手写some\">#</a> 手写 some</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.mysome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thisArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; thisArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = fn.call(thisArg, thisArr[i], i, thisArr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res1 = arr1.mysome(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;myres: &#x27;</span>, res1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写join\"><a class=\"markdownIt-Anchor\" href=\"#手写join\">#</a> 手写 join</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myjoin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//join()默认无参数时为逗号</span></span><br><span class=\"line\">   str = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span> ? <span class=\"string\">&#x27;,&#x27;</span> : str</span><br><span class=\"line\">   \t <span class=\"comment\">//空字符串处理</span></span><br><span class=\"line\">     <span class=\"comment\">//if (str !== &#x27;&#x27;) &#123;</span></span><br><span class=\"line\">     <span class=\"comment\">//      str = str || &#x27;,&#x27;</span></span><br><span class=\"line\">     <span class=\"comment\">//  &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr.length - <span class=\"number\">1</span> === i) &#123;</span><br><span class=\"line\">            res += arr[i]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += arr[i] + str</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; arr.join(&#x27; - &#x27;): &quot;</span>, arr.myjoin(<span class=\"string\">&#x27;==&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; arr.join(&#x27; - &#x27;): &quot;</span>, arr.myjoin());</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写函数计时器\"><a class=\"markdownIt-Anchor\" href=\"#手写函数计时器\">#</a> 手写函数计时器</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> countTime = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;execute time&#x27;</span>);</span><br><span class=\"line\">    res = callback();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;execute time&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countTime(fn)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结合filter和every\"><a class=\"markdownIt-Anchor\" href=\"#结合filter和every\">#</a> 结合 filter 和 every</h3>\n<p>打印自除数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        arr.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.toString().split(<span class=\"string\">&#x27;&#x27;</span>).every(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item % <span class=\"built_in\">parseInt</span>(val) == <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自除数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; count(1, 200): &#x27;</span>, count(<span class=\"number\">1</span>, <span class=\"number\">200</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写tolowercase\"><a class=\"markdownIt-Anchor\" href=\"#手写tolowercase\">#</a> 手写 toLowerCase</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;hello VUE ,I WILL study hard&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(str.toLowerCase());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mytoLowerCase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/[A-Z]/g</span>, <span class=\"function\">(<span class=\"params\">char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(char.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">32</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; mytoLowerCase(str): &#x27;</span>, mytoLowerCase(str));</span><br><span class=\"line\"><span class=\"comment\">//hello vue ,i will study hard</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "手写高阶函数"
            ]
        }
    ]
}