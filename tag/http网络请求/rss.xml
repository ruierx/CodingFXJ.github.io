<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>CodingFXJ&#39;Blog • Posts by &#34;http网络请求&#34; tag</title>
        <link>https://CodingFXJ.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 04 Jul 2021 15:12:59 +0800</pubDate>
        <lastBuildDate>Sun, 04 Jul 2021 15:12:59 +0800</lastBuildDate>
        <category>AJAX</category>
        <category>jQuery</category>
        <category>css</category>
        <category>CSS</category>
        <category>JS</category>
        <category>flex布局</category>
        <category>Git</category>
        <category>HEXO</category>
        <category>Github</category>
        <category>Note</category>
        <category>Blog</category>
        <category>ES6</category>
        <category>数组</category>
        <category>this指向</category>
        <category>时间</category>
        <category>懒加载</category>
        <category>LeetCode</category>
        <category>Vue</category>
        <category>Vuex</category>
        <category>高阶函数</category>
        <category>闭包</category>
        <category>NPM</category>
        <category>手写高阶函数</category>
        <category>算法</category>
        <category>扁平化</category>
        <category>复杂度</category>
        <category>JAVA</category>
        <category>设计模式</category>
        <category>HTTP网络请求</category>
        <category>Typora</category>
        <category>Markdown</category>
        <item>
            <guid isPermalink="true">https://codingfxj.github.io/2021/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</guid>
            <title>浏览器网页请求过程</title>
            <link>https://codingfxj.github.io/2021/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</link>
            <category>HTTP网络请求</category>
            <pubDate>Sun, 04 Jul 2021 15:12:59 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;完整的http请求过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整的http请求过程&#34;&gt;#&lt;/a&gt; 完整的 HTTP 请求过程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;域名解析 ==&amp;gt;  与服务器建立连接 ==&amp;gt; 发起 HTTP 请求  ==&amp;gt; 服务器响应 HTTP 请求，浏览器得到 html 代码  ==&amp;gt; 浏览器解析 html 代码，并请求 html 代码中的资源（如 js、css、图片） ==&amp;gt; 浏览器对页面进行渲染呈现给用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一-域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-域名解析&#34;&gt;#&lt;/a&gt; 一、域名解析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Chrome 浏览器 会首先搜索浏览器自身的 DNS 缓存，有且没有过期则解析到此结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果浏览器自身的缓存里面没有找到对应的条目，会搜索操作系统自身的 DNS 缓存，有且没有过期则停止搜索解析到此结束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 系统：ipconfig /displaydns 命令查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果在 Windows 系统的 DNS 缓存也没有找到，则读取 hosts 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;hosts 位于 ‪C:\Windows\System32\drivers\etc\hosts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;hosts 文件中也没有找到对应的条目，浏览器就会发起一个 DNS 的系统调用，就会向本地配置的首选 DNS 服务器发起域名解析请求&lt;/p&gt;
&lt;p&gt;并返回给 Windows 系统内核，内核又把结果返回给浏览器。（这是递归的请求，也就是运营商的 DNS 服务器必须得提供并返回该域名的 IP 地址）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过以上的 4 个步骤，还没有解析成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：一般不会进行以下几步&lt;/p&gt;
&lt;p&gt;操作系统就会查找 NetBIOS name Cache == &amp;gt; WINS 服务器 ==&amp;gt; 客户端就要进行广播查找 ==&amp;gt; 客户端就读取 LMHOSTS 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果还没有解析成功，那么就宣告这次解析失败，那就无法跟目标计算机进行通信。只要其中有一步可以解析成功，那就可以成功和目标计算机进行通信。&lt;/p&gt;
&lt;h3 id=&#34;二-与服务器建立连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-与服务器建立连接&#34;&gt;#&lt;/a&gt; 二、与服务器建立连接&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;TCP 连接的建立&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户端的请求到达服务器，首先就是三次握手建立 TCP 连接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三次握手的目的：试探一下对方是否遵循 TCP/IP 协议，为了在不可靠的信道上建立起可靠的连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么要进行第三次握手&lt;/strong&gt;：为了防止服务器端开启一些无用的连接，增加服务器开销；&lt;/p&gt;
&lt;p&gt;以及防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704153259.png&#34;/&gt;
&lt;h3 id=&#34;三-发起http请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-发起http请求&#34;&gt;#&lt;/a&gt; 三、发起 HTTP 请求&lt;/h3&gt;
&lt;p&gt;http 协议：计算机通过网络进行通信的规则，是一个基于请求与响应，无状态的，应用层的协议，常基于 TCP/IP 协议传输数据。&lt;/p&gt;
&lt;h4 id=&#34;请求报文结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#请求报文结构&#34;&gt;#&lt;/a&gt; 请求报文结构&lt;/h4&gt;
&lt;p&gt;请求报文包括四个部分：请求行，请求头，空行，请求体。&lt;/p&gt;
&lt;img src=&#34;https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704155902.png&#34;/&gt;
&lt;h3 id=&#34;四-服务器端响应http请求浏览器得到html代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-服务器端响应http请求浏览器得到html代码&#34;&gt;#&lt;/a&gt; 四、服务器端响应 HTTP 请求，浏览器得到 HTML 代码&lt;/h3&gt;
&lt;p&gt;HTTP 的响应报文也由四部分组成：响应行、响应头、空行、响应体&lt;/p&gt;
&lt;img src=&#34;https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704160248.png&#34;/&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lyn_00/article/details/84953763&#34;&gt;报文结构参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;五-浏览器解析html代码并请求html代码中的资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-浏览器解析html代码并请求html代码中的资源&#34;&gt;#&lt;/a&gt; 五、浏览器解析 HTML 代码，并请求 HTML 代码中的资源&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;解析 html 结构，形成 Dom 树&lt;/li&gt;
&lt;li&gt;解析 CSS，生成 cssom&lt;/li&gt;
&lt;li&gt;将 CSS 和 Dom 合并形成 render 树&lt;/li&gt;
&lt;li&gt;计算 layout 布局&lt;/li&gt;
&lt;li&gt;将布局渲染到屏幕上&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704162443.png&#34;/&gt;
&lt;h3 id=&#34;六-浏览器对页面进行渲染呈现给用户关闭连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-浏览器对页面进行渲染呈现给用户关闭连接&#34;&gt;#&lt;/a&gt; 六、浏览器对页面进行渲染呈现给用户，关闭连接&lt;/h3&gt;
&lt;h4 id=&#34;四次挥手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四次挥手&#34;&gt;#&lt;/a&gt; 四次挥手&lt;/h4&gt;
&lt;img src=&#34;https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704162253.png&#34;/&gt;
&lt;p&gt;问题一：&lt;/p&gt;
&lt;p&gt;为什么连接的时候是三次握手，关闭的时候却是四次握手？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了保障数据发送完再断开连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题二：&lt;/p&gt;
&lt;p&gt;为什么要等待一段时间在关闭连接？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为客户端发送完 ack 包后中途可能丢失，此时服务端未收到 ack 包会重发 fin 包，客户端在发送 ack 包刷新等待时间，&lt;/p&gt;
&lt;p&gt;确保服务端关闭再 关闭客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1kV411j7hA?from=search&amp;amp;seid=11094337157520488587&#34;&gt;参考视频 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1BV411a72M?from=search&amp;amp;seid=4937986881420888725&#34;&gt;参考视频 2&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
