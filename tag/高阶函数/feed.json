{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"高阶函数\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "title": "JS常用高阶函数",
            "date_published": "2021-06-09T10:00:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"es6高阶函数之filter\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之filter\">#</a> ES6 高阶函数之 filter</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<blockquote>\n<ul>\n<li>通过提供函数实现的依次测试的所有元素，true 则表示通过，如果为 false 则失败。</li>\n<li>返回值是一个新数组，由通过测试为 true 的所有元素组成</li>\n<li>如果没有任何数组元素通过测试，则返回空数组。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>满足条件的留下，是对原数组的过滤。</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>\t必须，遍历到的当前元素值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span> \t可选，当前元素的索引值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">arr</span>\t\t可选，当前元素属于的数组对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h4>\n<h5 id=\"过滤小于100\"><a class=\"markdownIt-Anchor\" href=\"#过滤小于100\">#</a> 过滤小于 100</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">110</span>,<span class=\"number\">60</span>,<span class=\"number\">190</span>,<span class=\"number\">50</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newNums =nums.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt; <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newNums)<span class=\"comment\">//[20,30,60,50]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"返回奇数元素\"><a class=\"markdownIt-Anchor\" href=\"#返回奇数元素\">#</a> 返回奇数元素</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> x%<span class=\"number\">2</span>!==<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;))<span class=\"comment\">//[1,3,5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r,arr= [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;pear&#x27;</span>, <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>];</span><br><span class=\"line\">r=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr.indexOf(value)===index;</span><br><span class=\"line\"><span class=\"comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置相等,表示是同一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置不相等，表示元素重复并且过滤。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);<span class=\"comment\">//[&quot;apple&quot;, &quot;strawberry&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.filter( <span class=\"function\">(<span class=\"params\">element, index, self</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.indexOf( element ) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr2 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr1 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"找出素数\"><a class=\"markdownIt-Anchor\" href=\"#找出素数\">#</a> 找出素数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">20</span>,<span class=\"number\">37</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> result=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">Math</span>.sqrt(value)+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(value%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之map\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之map\">#</a> ES6 高阶函数之 map</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\">#</a> 定义</h4>\n<blockquote>\n<p>原数组中的每个元素依次调用一个指定方法后，</p>\n<p>返回返回值组成的新数组</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>对原数组的加工，返回加工后新数组</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>  数组中正在处理的当前元素。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span>可选  数组中正在处理的当前元素的索引。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">array</span>可选  <span class=\"title\">map</span> 方法被调用的数组。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">thisArg</span>可选 执行 <span class=\"title\">callback</span> 函数时使用的<span class=\"title\">this</span> 值。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\">#</a> 用法</h4>\n<h5 id=\"返回数组元素平方后的新数组\"><a class=\"markdownIt-Anchor\" href=\"#返回数组元素平方后的新数组\">#</a> 返回数组元素平方后的新数组</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>)</span>&#123;  <span class=\"comment\">//定义一个平方函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(pow);  <span class=\"comment\">//map()传入的是函数对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);       <span class=\"comment\">//结果：[1,4,9,16,25,36,49,64,81];</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用给定函数创建新字符串\"><a class=\"markdownIt-Anchor\" href=\"#用给定函数创建新字符串\">#</a> 用给定函数创建新字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapString = <span class=\"function\">(<span class=\"params\">str, fn</span>) =&gt;</span></span><br><span class=\"line\">  str</span><br><span class=\"line\">    .split(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> fn(c, i, str))</span><br><span class=\"line\">    .join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">mapString(<span class=\"string\">&#x27;lorem ipsum&#x27;</span>, <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.toUpperCase()); <span class=\"comment\">// &#x27;LOREM IPSUM&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"把二维数组变字符串\"><a class=\"markdownIt-Anchor\" href=\"#把二维数组变字符串\">#</a> 把二维数组变字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\">(<span class=\"params\">arr, delimiter = <span class=\"string\">&#x27;,&#x27;</span></span>) =&gt;</span></span><br><span class=\"line\">\tarr.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> </span><br><span class=\"line\">\t\t v.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> </span><br><span class=\"line\"> (<span class=\"built_in\">isNaN</span>(x) ? <span class=\"string\">`&quot;<span class=\"subst\">$&#123;x.replace(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&#x27;&quot;&quot;&#x27;</span>)&#125;</span>&quot;`</span> :x)).join(delimiter)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          .join(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"数字序列转为数组删除符号\"><a class=\"markdownIt-Anchor\" href=\"#数字序列转为数组删除符号\">#</a> 数字序列转为数组，删除符号</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> digitize = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [...<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.abs(n)&#125;</span>`</span>].map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(i));</span><br><span class=\"line\">digitize(<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">digitize(-<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"拿到所有图片的图片名称并以数组形式返回\"><a class=\"markdownIt-Anchor\" href=\"#拿到所有图片的图片名称并以数组形式返回\">#</a> 拿到所有图片的图片名称并以数组形式返回</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getImages = <span class=\"function\">(<span class=\"params\">el, includeDuplicates = <span class=\"literal\">false</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> images = [...el.getElementsByTagName(<span class=\"string\">&#x27;img&#x27;</span>)].</span><br><span class=\"line\">  map(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span></span><br><span class=\"line\">    img.getAttribute(<span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> includeDuplicates ? images :</span><br><span class=\"line\">  [...new <span class=\"built_in\">Set</span>(images)];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">true</span>); </span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;image1.png&#x27;, &#x27;...&#x27;]</span></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;...&#x27;] 名字去重</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"vue中重复渲染组件\"><a class=\"markdownIt-Anchor\" href=\"#vue中重复渲染组件\">#</a> vue 中重复渲染组件</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;ele&#x27;</span>,&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">createElement</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">\t\t\t    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">length</span>:<span class=\"number\">5</span></span><br><span class=\"line\">\t\t\t\t&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> createElement(Child);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之reduce\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之reduce\">#</a> ES6 高阶函数之 reduce</h3>\n<h4 id=\"定义-3\"><a class=\"markdownIt-Anchor\" href=\"#定义-3\">#</a> 定义</h4>\n<blockquote>\n<p><strong>原始数组不发生改变</strong></p>\n<p><strong>reduce () 对于空数组是不会执行回调函数的</strong></p>\n</blockquote>\n<h4 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback , [initialValue])</span><br><span class=\"line\"><span class=\"comment\">//callback （执行数组中每个值的函数，包含四个参数）</span></span><br><span class=\"line\"><span class=\"comment\">//initialValue （作为第一次调用 callback 的第一个参数。）</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有提供initialValue，从索引1的地方开始执行callback方法，跳过第一个索引。</span></span><br><span class=\"line\"><span class=\"comment\">//如果提供initialValue，从索引0开始</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"callback-函数\"><a class=\"markdownIt-Anchor\" href=\"#callback-函数\">#</a> callback 函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行数组中每个值的callback 函数，包含四个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;，<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1、<strong>previousValue</strong> ：上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>\n2、<strong>currentValue</strong> ：数组中当前被处理的元素<br>\n 3、<strong>index</strong> ：当前元素在数组中的索引<br>\n 4、<strong>array</strong> ：调用 reduce 函数 的数组</p>\n</blockquote>\n<h4 id=\"高级用法\"><a class=\"markdownIt-Anchor\" href=\"#高级用法\">#</a> 高级用法</h4>\n<h5 id=\"数组求和\"><a class=\"markdownIt-Anchor\" href=\"#数组求和\">#</a> 数组求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">...arr</span>) =&gt;</span> [...arr].reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>);</span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\">sum(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重-2\"><a class=\"markdownIt-Anchor\" href=\"#数组去重-2\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!pre.includes(cur))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"计算两个或多个数字的平均值\"><a class=\"markdownIt-Anchor\" href=\"#计算两个或多个数字的平均值\">#</a> 计算两个或多个数字的平均值</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> average = <span class=\"function\">(<span class=\"params\">...nums</span>) =&gt;</span></span><br><span class=\"line\">  nums.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>) / nums.length;</span><br><span class=\"line\">average(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 2</span></span><br><span class=\"line\">average(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将二维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将二维数组转化为一维\">#</a> 将二维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将多维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将多维数组转化为一维\">#</a> 将多维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]]]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>pre.concat(<span class=\"built_in\">Array</span>.isArray(cur)?newArr(cur):cur),[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr(arr)); <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"对象里的属性求和\"><a class=\"markdownIt-Anchor\" href=\"#对象里的属性求和\">#</a> 对象里的属性求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;math&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;chinese&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;english&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = result.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur.score + prev;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">//60</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"统计数组中每个元素出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#统计数组中每个元素出现的次数\">#</a> 统计数组中每个元素出现的次数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr11 = [<span class=\"number\">111</span>, <span class=\"number\">22</span>, <span class=\"number\">111</span>, <span class=\"number\">234</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">111</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr11.reduce(<span class=\"function\">(<span class=\"params\">pre, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pre[item] = pre[item] ? pre[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//&#123; &#x27;22&#x27;: 1, &#x27;111&#x27;: 3, &#x27;234&#x27;: 1, &#x27;999&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tiff&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nameNum = names.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(cur <span class=\"keyword\">in</span> pre)&#123;</span><br><span class=\"line\">    pre[cur]++</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    pre[cur] = <span class=\"number\">1</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;,&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nameNum); <span class=\"comment\">//&#123;Alice: 2, Bob: 1, Tiff: 1, Bruce: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之sort\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之sort\">#</a> ES6 高阶函数之 sort</h3>\n<h4 id=\"定义-4\"><a class=\"markdownIt-Anchor\" href=\"#定义-4\">#</a> 定义</h4>\n<blockquote>\n<p><code>sort() </code> 方法用原地算法对数组的元素进行排序，并返回数组，</p>\n<p>该排序方法会在原数组上直接进行排序，并<strong>不会生成一个排好序的新数组</strong>。</p>\n<p>排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<h4 id=\"语法-4\"><a class=\"markdownIt-Anchor\" href=\"#语法-4\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.sort(sortby)</span><br><span class=\"line\"><span class=\"comment\">//sort() 在没有参数时，返回的结果是按升序来排列的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortby\t可选。规定排序顺序。必须是函数。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>function(a, b)(return a- b)</strong></p>\n<ul>\n<li>如果指明了参数：compare (a, b) ，（a, b 是两个要比较的元素，a 在 b 前面）那么数组会按照该函数的返回值排序</li>\n<li>如果 compare (a, b) 返回值 &lt; 0 ，a 会被排列到 b 之前，即参数 a, b 的顺序保存原样；</li>\n<li>如果 compare (a, b) 返回值 = 0 ，a 和 b 的相对位置不变。（ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守）</li>\n<li>如果 compare (a, b) 返回值 &gt; 0 ，b 会被排列到 a 之前。即交换参数 a, b 的顺序</li>\n</ul>\n</blockquote>\n<h4 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\">#</a> 用法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sortby= <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> koala=[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].sort(sortby)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(koala);</span><br><span class=\"line\"><span class=\"comment\">// [1 , 2 , 10 , 20]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义高阶函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义高阶函数\">#</a> 自定义高阶函数</h3>\n<h4 id=\"字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\"><a class=\"markdownIt-Anchor\" href=\"#字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\">#</a> 字符串数组转换为整数数组，每个元素代表原始数组中字符串的长度。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strArray=[<span class=\"string\">&#x27;JavaScript&#x27;</span>,<span class=\"string\">&#x27;PHP&#x27;</span>,<span class=\"string\">&#x27;JAVA&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapForEach</span>(<span class=\"params\">arr,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newArray = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        newArray.push(&#123;</span><br><span class=\"line\">            fn(arr[i])</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lenArray = mapForEach(strArray,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.length;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lenArray);<span class=\"comment\">//[10,3,4,1,6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>代码分析</strong></p>\n<ul>\n<li>创建了一个高阶函数 mapForEach ，它接受一个数组和一个回调函数 fn。</li>\n<li>它循环遍历传入的数组，并在每次迭代时在 newArray.push 方法调用回调函数 fn 。</li>\n<li>回调函数 fn 接收数组的当前元素并返回该元素的长度，该元素存储在 newArray 中。</li>\n<li>for 循环完成后，newArray 被返回并赋值给 lenArray。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "JS",
                "ES6",
                "高阶函数"
            ]
        }
    ]
}