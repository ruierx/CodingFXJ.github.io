{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"js\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/07/16/JS%E9%9A%BE%E7%82%B9%E5%A4%8D%E4%B9%A0/",
            "url": "https://codingfxj.github.io/2021/07/16/JS%E9%9A%BE%E7%82%B9%E5%A4%8D%E4%B9%A0/",
            "title": "JS难点复习",
            "date_published": "2021-07-16T15:48:04.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型和原型链\">#</a> 原型和原型链</h3>\n<p>ES5 中，构造函数创建对象的方式，每个函数都会重新开辟内存空间，浪费内存。</p>\n<p>所有对象的原型链尽头都是 Object</p>\n<p>原型：每个构造函数都有一个属性 prototype，指向它的原型对象，实例和构造函数会共享原型对象里面的方法和属性。</p>\n<p>通过构造函数创建的对象实例可以访问原型对象的属性和方法。</p>\n<p>ES5</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/pics/20210707095802.png\"/>\n<p><strong>原型链</strong>：</p>\n<p>对象实例里面有一个 proto 属性指向构造函数的原型对象，构造函数的原型对象也有 proto 属性指向 Object 原型对象，为查找对象的成员提供的 一条链路。</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/pics/20210707100004.png\"/>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/pics/20210707101129.png\"/>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/pics/20210707101211.png\"/>\n<h3 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<ol>\n<li>\n<p>全局作用域<br>\n (1) 全局作用域在页面打开时被创建，页面关闭时被销毁<br>\n (2) 编写在 script 标签中的变量和函数，作用域为全局，在页面的任意位置都可以访问到<br>\n (3) 在全局作用域中有全局对象 window, 代表一个浏览器窗口，由浏览器创建，可以直接调用<br>\n (4) 全局作用域中声明的变量和函数会作为 window 对象的属性和方法保存</p>\n</li>\n<li>\n<p>函数作用域<br>\n (1) 调用函数时，函数作用域被创建，函数执行完毕，函数作用域被销毁<br>\n (2) 每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的<br>\n (3) 在函数作用域中可以访问到全局作用域的变量，在函数外无法访问到函数作用域内的变量<br>\n (4) 在函数作用域中访问变量、函数时，会先在自身作用域中寻找，</p>\n<p>​      若没有找到，则会到函数的上一级作用域中寻找，一直到全局作用域</p>\n</li>\n</ol>\n<p><strong>作用域的深层次理解</strong></p>\n<ul>\n<li>执行期的上下文\n<ul>\n<li>当函数代码执行的前期 会创建一个执行期上下文的内部对象 AO（作用域）</li>\n<li>这个内部的对象是预编译的时候创建出来的 因为当函数被调用的时候 会先进行预编译</li>\n<li>在全局代码执行的前期会创建一个执行期的上下文的对象 GO</li>\n</ul>\n</li>\n<li>这里有关 js 的预编译 也简单的提一下</li>\n</ul>\n<p><strong>函数作用域预编译</strong></p>\n<ol>\n<li>\n<p>创建 ao 对象 AO {}</p>\n</li>\n<li>\n<p>找形参和变量声明， 将变量和形参名 ，</p>\n<p>当做 AO 对象的属性名， 值为 undefined</p>\n</li>\n<li>\n<p>实参形参相统一</p>\n</li>\n<li>\n<p>在函数体里面找函数声明， 值赋予函数体</p>\n</li>\n</ol>\n<p><strong>全局作用域的预编译</strong></p>\n<ol>\n<li>创建 GO 对象</li>\n<li>找变量声明 将变量名作为 GO 对象的属性名 值是 undefined</li>\n<li>找函数声明 值赋予函数体</li>\n</ol>\n<h3 id=\"作用域链\"><a class=\"markdownIt-Anchor\" href=\"#作用域链\">#</a> 作用域链</h3>\n<p>会被保存到一个隐式的属性中去 [[scope]]</p>\n<p>里面存储的就是作用域链：AO 和 GO 的集合</p>\n<blockquote>\n<p>在函数作用域中访问变量、函数时，会先在自身 AO 寻找，</p>\n<p>若没有找到，则会到函数的上一级作用域中寻找，一直到全局作用域 GO</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//访问 scope</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.dir(a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h3>\n<p>内部函数被保留到外部，导致原有的作用域链不被释放，这样可以访问外部函数 AO 里的变量，造成内存泄漏</p>\n<blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数。(一个函数和它周围状态的引用捆绑在一起的组合)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = test();</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">fn()<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数作为参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    fn()<span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"comment\">//不是在执行的地方往上查找</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"comment\">//在定义的地方往上查找变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"防抖函数\"><a class=\"markdownIt-Anchor\" href=\"#防抖函数\">#</a> 防抖函数</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">delay, callback</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">               timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                   callback(value)</span><br><span class=\"line\">               &#125;, delay)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> debounceFunc = debounce(<span class=\"number\">1000</span>, fn)</span><br><span class=\"line\">       input.addEventListener(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">           debounceFunc(e.target.value)</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片懒加载\"><a class=\"markdownIt-Anchor\" href=\"#图片懒加载\">#</a> 图片懒加载</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">       <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           images.forEach(</span><br><span class=\"line\">               <span class=\"function\"><span class=\"params\">image</span> =&gt;</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">const</span> imageTop = image.getBoundingClientRect().top</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (imageTop &lt; <span class=\"built_in\">window</span>.innerHeight) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">const</span> data_src = image.getAttribute(<span class=\"string\">&#x27;data-src&#x27;</span>)</span><br><span class=\"line\">                       image.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, data_src)</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           )</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\"><span class=\"params\">enteries</span> =&gt;</span> &#123;</span><br><span class=\"line\">            enteries.forEach(<span class=\"function\"><span class=\"params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry.isIntersecting) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> img = entry.target</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> data_src = img.getAttribute(<span class=\"string\">&#x27;data-src&#x27;</span>)</span><br><span class=\"line\">                    img.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, data_src)</span><br><span class=\"line\">                    observer.unobserve(img)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback)</span><br><span class=\"line\">images.forEach(<span class=\"function\"><span class=\"params\">image</span> =&gt;</span> &#123;</span><br><span class=\"line\">    observer.observe(image)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"浅拷贝和深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝和深拷贝\">#</a> 浅拷贝和深拷贝</h3>\n<p><strong>浅拷贝</strong>只会拷贝最外面的一层，里面的对象拷贝的是地址，即引用，修改拷贝后的数据时原数据会随着修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;&#125;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">       obj3[k] = obj1[k]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     obj3.msg.age = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//obj1.msg.age的值也会变成30，说明引用的同一块地址</span></span><br></pre></td></tr></table></figure>\n<p>ES6 中的浅拷贝</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(newobj, oldobj);</span><br></pre></td></tr></table></figure>\n<p>通过 slice,concat 实现浅拷贝</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrnew = arrold.slice(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arrnew = arrold.concat([]);</span><br></pre></td></tr></table></figure>\n<p>通过… 实现数组的浅拷贝</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrnew = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(...arrold);</span><br></pre></td></tr></table></figure>\n<p><strong>递归深拷贝</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">newObj, oldObj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> oldObj) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldObj[k] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">            newObj[k] = [];</span><br><span class=\"line\">            deepCopy(newObj[k], oldObj[k])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldObj[k] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">            newObj[k] = &#123;&#125;</span><br><span class=\"line\">            deepCopy(newObj[k], oldObj[k])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newObj[k] = oldObj[k]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"乞丐版深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#乞丐版深拷贝\">#</a> 乞丐版深拷贝</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(objString));</span><br><span class=\"line\"><span class=\"comment\">//不可以拷贝 undefined ， function， RegExp 等等类型的,</span></span><br><span class=\"line\"><span class=\"comment\">//字符串必须符合JSON格式，即键值都必须使用双引号包裹</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>时间对象 =&gt; 字符串的形式</li>\n<li>如果 json 里有 RegExp、Error 对象，则序列化的结果将只得到空对象 RegExp、Error =&gt; {}</li>\n<li>如果 json 里有 function,undefined，则序列化的结果会把 function,undefined 丢失；</li>\n<li>如果 json 里有 NaN、Infinity 和 - Infinity，则序列化的结果会变成 null；</li>\n<li>如果 json 里有对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor；</li>\n<li>如果对象中存在循环引用的情况也无法实现深拷贝</li>\n</ol>\n</blockquote>\n<h4 id=\"lodash函数库实现深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#lodash函数库实现深拷贝\">#</a> lodash 函数库实现深拷贝</h4>\n<blockquote>\n<p>lodash.cloneDeep () 实现深拷贝</p>\n</blockquote>\n<h3 id=\"new关键字执行过程\"><a class=\"markdownIt-Anchor\" href=\"#new关键字执行过程\">#</a> new 关键字执行过程</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;eat&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;zs&#x27;</span>,<span class=\"number\">19</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>创建一个空对象</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>设置原型链</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.__proto__= Person.prototype;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>this 指向新对象</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = Person.call(p);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>返回新对象的地址</strong></li>\n</ol>\n<h3 id=\"null-和-undefined区别\"><a class=\"markdownIt-Anchor\" href=\"#null-和-undefined区别\">#</a> null 和 undefined 区别</h3>\n<blockquote>\n<p>null 表示一个值被定义了，定义为 “空值”；<br>\nundefined 表示根本不存在定义。</p>\n</blockquote>\n<p><strong>相同点</strong></p>\n<p>if 判断语句中，两者都会被转换为 false</p>\n<p><strong>null</strong></p>\n<blockquote>\n<p>为 Object 类型</p>\n<p>作为对象原型链的终点 （Object.getPrototypeOf (Object.prototype)）</p>\n</blockquote>\n<p><strong>undefined</strong></p>\n<blockquote>\n<p>1，变量被声明但没有赋值，该变量为 undefined</p>\n<p>2，调用函数时，应该提供的参数没有提供，该参数为 undefined</p>\n<p>3，对象没有赋值的属性，该属性的值为 undefined</p>\n<p>4，函数没有返回值时，默认返回 undefined</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//转为数值时</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>));\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h3>\n<p>会造成内存泄漏的操作：</p>\n<blockquote>\n<p>闭包</p>\n<p>意外的全局变量</p>\n<p>被遗忘的定时器</p>\n<p>脱离 dom 的引用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = b = <span class=\"number\">0</span>;<span class=\"comment\">//意外的全局变量</span></span><br><span class=\"line\">    <span class=\"comment\">//let a = (b = 0)</span></span><br><span class=\"line\">    <span class=\"comment\">//没有声名b，会全局声名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象字面量代替switch处理\"><a class=\"markdownIt-Anchor\" href=\"#对象字面量代替switch处理\">#</a> 对象字面量代替 switch 处理</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//便于扩展，数据和逻辑分离（高内聚、低耦合）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">red</span>:[<span class=\"string\">&#x27;apple&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">yellow</span>:[<span class=\"string\">&#x27;banana&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">color</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit[color] || []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的key\"><a class=\"markdownIt-Anchor\" href=\"#对象的key\">#</a> 对象的 key</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 =&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;zs&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 =&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;ls&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3=&#123;\t\t<span class=\"comment\">//key值不是字符串会隐式调用toSring转为字符串</span></span><br><span class=\"line\">   [obj1]: <span class=\"string\">&#x27;11&#x27;</span>, <span class=\"comment\">//&#x27;[object Object]&#x27;:&#x27;11&#x27;</span></span><br><span class=\"line\">   [obj2]: <span class=\"string\">&#x27;22&#x27;</span> <span class=\"comment\">//&#x27;[object Object]&#x27;:&#x27;22&#x27;</span></span><br><span class=\"line\">&#125;\t\t\t  \t<span class=\"comment\">//key值一样后面覆盖前面</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj3)<span class=\"comment\">//[object Object] 22 </span></span><br><span class=\"line\"><span class=\"comment\">//map可解决这个问题 new Map().set(obj1, &#x27;11&#x27;).set(obj2, &#x27;22&#x27;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#跨域问题\">#</a> 跨域问题</h3>\n<blockquote>\n<p>浏览器同源策略：为了保障数据安全，浏览器有一种约定为同源策略，是最基本安全功能。只要协议、域名、端口号有一个不一样，就会有跨域问题。</p>\n</blockquote>\n<h4 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<h4 id=\"一-jsonp方式\"><a class=\"markdownIt-Anchor\" href=\"#一-jsonp方式\">#</a> <strong>一、JSONP 方式</strong></h4>\n<blockquote>\n<p>利用<script src='...'></script>实现</p>\n</blockquote>\n<p><strong>原理图：</strong></p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210706203203.png\"/>\n<p><strong>具体实现过程</strong>（jquery 方式）</p>\n<p>客户端：</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210706204030.png\"/>\n<p>服务器端：</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210706204154.png\"/>\n<blockquote>\n<p><strong>问题</strong>：JSONP<mark> 只能处理 get 请求</mark>，数据暴露在 url 中不安全</p>\n</blockquote>\n<h4 id=\"二-cors资源共享\"><a class=\"markdownIt-Anchor\" href=\"#二-cors资源共享\">#</a> 二、CORS 资源共享</h4>\n<p><strong>服务端修改响应头</strong></p>\n<ol>\n<li>JAVA 后台</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加&#x27;/&#x27;</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;http://www.domain1.com&quot;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许前端带认证cookie：启用此项后，上面的域名不能为&#x27;*&#x27;，必须指定具体的域名，否则浏览器会提示</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;Content-Type,X-Requested-With&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>2） nodejs 后台</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应头部  * 任意的域都可以访问</span></span><br><span class=\"line\">    res.header(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"https://segmentfault.com/a/1190000011145364\">其他方式</a></strong></p>\n<h3 id=\"js延时加载\"><a class=\"markdownIt-Anchor\" href=\"#js延时加载\">#</a> JS 延时加载</h3>\n<p><a href=\"https://blog.csdn.net/meijory/article/details/76389762\">参考</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/16/%E6%89%8B%E5%86%99Promise%E5%85%A8%E8%BF%87%E7%A8%8B/",
            "url": "https://codingfxj.github.io/2021/07/16/%E6%89%8B%E5%86%99Promise%E5%85%A8%E8%BF%87%E7%A8%8B/",
            "title": "手写Promise全过程",
            "date_published": "2021-07-16T15:39:04.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h2 id=\"手写promise全过程\"><a class=\"markdownIt-Anchor\" href=\"#手写promise全过程\">#</a> 手写 Promise 全过程</h2>\n<h3 id=\"一-声名promise并绑定this\"><a class=\"markdownIt-Anchor\" href=\"#一-声名promise并绑定this\">#</a> 一、声名 Promise 并绑定 this</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.定义三个状态</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> FUFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始态</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.PENDING</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = <span class=\"literal\">null</span></span><br><span class=\"line\">                <span class=\"comment\">// 绑定this</span></span><br><span class=\"line\">            executor(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.成功状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.FUFILLED</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.失败状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.REJECTED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题一：能多次修改状态</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My-Promise<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./Promise.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            resolve(<span class=\"string\">&#x27;大功告成！&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            reject(<span class=\"string\">&#x27;一败涂地！&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(p1);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210708162731.png\"/>\n<h3 id=\"二-状态保护与执行者异步捕获\"><a class=\"markdownIt-Anchor\" href=\"#二-状态保护与执行者异步捕获\">#</a> 二、状态保护与执行者异步捕获</h3>\n<blockquote>\n<p>改变状态前先判断，让初始状态只能修改一次</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.定义三个状态</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> FUFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始态</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.PENDING</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = <span class=\"literal\">null</span></span><br><span class=\"line\">                <span class=\"comment\">// 绑定this</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                executor(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.成功状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是不是初始态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.FUFILLED</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.失败状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是不是初始态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.REJECTED</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-then方法构建\"><a class=\"markdownIt-Anchor\" href=\"#三-then方法构建\">#</a> 三、then 方法构建</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">           onFulfilled = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">           onRejected = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FUFILLED) &#123;</span><br><span class=\"line\">           onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">           onRejected(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-实现then异步\"><a class=\"markdownIt-Anchor\" href=\"#四-实现then异步\">#</a> 四、实现 then 异步</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FUFILLED) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            onRejected(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            onRejected(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            onRejected(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"五-解决同步代码需要等待执行问题\"><a class=\"markdownIt-Anchor\" href=\"#五-解决同步代码需要等待执行问题\">#</a> 五、解决同步代码需要等待执行问题</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve(&#x27;大功告成！&#x27;)S</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;一败涂地！&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;反败为胜！&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    p1.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;, <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;同步代码&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决前输出：<br>\n同步代码<br>\n一败涂地！<br>\n反败为胜！</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.FULFILLED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.map(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">                callback.onFulfilled(value);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.REJECTED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.map(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">                callback.onRejected(value);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决后输出：<br>\n同步代码<br>\n反败为胜！<br>\n一败涂地！</p>\n</blockquote>\n<h3 id=\"六-then的链式操作\"><a class=\"markdownIt-Anchor\" href=\"#六-then的链式操作\">#</a> 六、then 的链式操作</h3>\n<blockquote>\n<p><strong>注意点：</strong></p>\n<ol>\n<li>then 返回的时 Promise，Promise 需要改变</li>\n<li>之前的 Promise 状态并不会影响之后的 Promise 状态</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;大功告成！&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;一败涂地！&quot;);</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;状态绑定成功！&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    p.then(</span><br><span class=\"line\">            <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;马到功成！&quot;</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;优胜劣败！&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .then(</span><br><span class=\"line\">            <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;同步代码&quot;</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//then的穿透处理</span></span><br><span class=\"line\">        onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//then的穿透处理</span></span><br><span class=\"line\">        onRejected = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">                <span class=\"attr\">onFulfilled</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> result = onFulfilled(value);</span><br><span class=\"line\">                        resolve(result);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                        reject(error);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">onRejected</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> result = onRejected(value);</span><br><span class=\"line\">                        resolve(result);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (error) &#123; </span><br><span class=\"line\">                        reject(error);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FULFILLED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> result = onFulfilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123; <span class=\"comment\">//解决异常</span></span><br><span class=\"line\">                    reject(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> result = onRejected(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123; <span class=\"comment\">//解决异常</span></span><br><span class=\"line\">                    reject(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210708174000.png\"/>\n<h3 id=\"七-返回值的判断与处理\"><a class=\"markdownIt-Anchor\" href=\"#七-返回值的判断与处理\">#</a> 七、返回值的判断与处理</h3>\n<blockquote>\n<p>判断并分别处理返回值为 Promise、普通值的情况</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FULFILLED) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = onFulfilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">            <span class=\"comment\">// 判断并处理返回值 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                result.then(resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = onRejected(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">            <span class=\"comment\">// 判断并处理返回值 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                result.then(resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"八-代码优化及复用\"><a class=\"markdownIt-Anchor\" href=\"#八-代码优化及复用\">#</a> 八、代码优化及复用</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        onRejected = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">                <span class=\"attr\">onFulfilled</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// try &#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     let result = onFulfilled(value);</span></span><br><span class=\"line\">                    <span class=\"comment\">//     resolve(result);</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125; catch (error) &#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     reject(error);</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">onRejected</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// try &#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     let result = onRejected(value);</span></span><br><span class=\"line\">                    <span class=\"comment\">//     resolve(result);</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125; catch (error) &#123;</span></span><br><span class=\"line\">                    <span class=\"comment\">//     //解决异常</span></span><br><span class=\"line\">                    <span class=\"comment\">//     reject(error);</span></span><br><span class=\"line\">                    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FULFILLED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// try &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     let result = onFulfilled(this.value);</span></span><br><span class=\"line\">                <span class=\"comment\">//     // resolve(result)</span></span><br><span class=\"line\">                <span class=\"comment\">//     if (result instanceof Promise) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         result.then(resolve, reject);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125; else &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         resolve(result);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125; catch (error) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     reject(error);</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.parse(onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// try &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     let result = onRejected(this.value);</span></span><br><span class=\"line\">                <span class=\"comment\">//     if (result instanceof Promise) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         result.then(resolve, reject);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125; else &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         resolve(result);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125; catch (error) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     reject(error);</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.parse(onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//抽取方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parse</span>(<span class=\"params\">result, resolve, reject</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            result.then(resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九-返回类型约束\"><a class=\"markdownIt-Anchor\" href=\"#九-返回类型约束\">#</a> 九、返回类型约束</h3>\n<blockquote>\n<p>当前 Promise 不能返回自己</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">return</span> p) <span class=\"comment\">//原生的会报错:TypeError</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        onRejected = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">                <span class=\"attr\">onFulfilled</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(promise, onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">onRejected</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(promise, onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FULFILLED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.parse(promise, onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.parse(promise, onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parse</span>(<span class=\"params\">promise, result, resolve, reject</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise == result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;Chaining cycle detected for promise&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            result.then(resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十-实现resolve和reject\"><a class=\"markdownIt-Anchor\" href=\"#十-实现resolve和reject\">#</a> 十、实现 resolve 和 reject</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">               value.then(resolve, reject);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               resolve(value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">_, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           reject(reason);</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十一-promiseall实现\"><a class=\"markdownIt-Anchor\" href=\"#十一-promiseall实现\">#</a> 十一、Promise.all () 实现</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">all</span>(<span class=\"params\">promises</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolves = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        promises.forEach(<span class=\"function\">(<span class=\"params\">promise, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            promise.then(</span><br><span class=\"line\">                <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolves.push(value);</span><br><span class=\"line\">                    <span class=\"comment\">//判断数组长度，来看是否全部成功</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (resolves.length == promises.length) &#123;</span><br><span class=\"line\">                        resolve(resolves);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    reject(reason);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;失败&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//所有成功才会执行成功的回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promises = <span class=\"built_in\">Promise</span>.all([p1, p2]).then(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">promises</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;resolve:&#x27;</span>, promises);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;reject:&#x27;</span>, reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"十二-实现promiserace\"><a class=\"markdownIt-Anchor\" href=\"#十二-实现promiserace\">#</a> 十二、实现 Promise.race ()</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只要 <code>p1</code> 、 <code>p2</code> 、 <code>p3</code>  之中有一个实例率先改变状态， <code>p</code>  的状态就跟着改变；率先改变的 Promise 实例的返回值，就传递给 <code>p</code>  的回调函数。 <strong>(谁快用谁)</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">race</span>(<span class=\"params\">promises</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           promises.map(<span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">               promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                   resolve(value);</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&quot;成功1&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;成功2&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promises = <span class=\"built_in\">Promise</span>.race([p1, p2]).then(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">promises</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(promises);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"十三-完整代码\"><a class=\"markdownIt-Anchor\" href=\"#十三-完整代码\">#</a> 十三、完整代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.定义三个状态</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> FUFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始态</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.PENDING</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks = []</span><br><span class=\"line\">        <span class=\"comment\">// 绑定this    </span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            executor(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//3.resolve改变状态并执行回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.FULFILLED;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//遍历回调函数数组，传值并执行onFulfilled函数</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.callbacks.map(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    callback.onFulfilled(value);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//3. reject改变状态并执行回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.REJECTED;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">             <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//遍历回调函数数组，传值并执行onRejected函数</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.map(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">                callback.onRejected(value);</span><br><span class=\"line\">          \t  &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//then方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断参数是否为函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">            onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">            onRejected = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始态把回调函数存入数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.PENDING) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">onFulfilled</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.parse(promise, onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">onRejected</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.parse(promise, onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//成功</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.FULFILLED) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(promise, onFulfilled(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status == <span class=\"built_in\">Promise</span>.REJECTED) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.parse(promise, onRejected(<span class=\"built_in\">this</span>.value), resolve, reject);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//解决链式调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">parse</span>(<span class=\"params\">promise, result, resolve, reject</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不能返回自身promise</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise == result) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&quot;Chaining cycle detected for promise&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                result.then(resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                value.then(resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">_, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            reject(reason);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">all</span>(<span class=\"params\">promises</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> resolves = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个promise并执行</span></span><br><span class=\"line\">            promises.forEach(<span class=\"function\">(<span class=\"params\">promise, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                promise.then(</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        resolves.push(value);<span class=\"comment\">//保存</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolves.length == promises.length) &#123;</span><br><span class=\"line\">                            resolve(resolves);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        reject(reason);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">race</span>(<span class=\"params\">promises</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            promises.map(<span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">                promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolve(value);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/07/ES6%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://codingfxj.github.io/2021/07/07/ES6%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "ES6新特性",
            "date_published": "2021-07-07T08:09:19.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"es6新特性\"><a class=\"markdownIt-Anchor\" href=\"#es6新特性\">#</a> ES6 新特性</h1>\n<h3 id=\"const-与-let-变量\"><a class=\"markdownIt-Anchor\" href=\"#const-与-let-变量\">#</a> const 与 let 变量</h3>\n<h3 id=\"模板字面量\"><a class=\"markdownIt-Anchor\" href=\"#模板字面量\">#</a> 模板字面量</h3>\n<h3 id=\"解构\"><a class=\"markdownIt-Anchor\" href=\"#解构\">#</a> 解构</h3>\n<h3 id=\"对象字面量简写法\"><a class=\"markdownIt-Anchor\" href=\"#对象字面量简写法\">#</a> 对象字面量简写法</h3>\n<h3 id=\"forof循环\"><a class=\"markdownIt-Anchor\" href=\"#forof循环\">#</a> for…of 循环</h3>\n<h3 id=\"展开运算符\"><a class=\"markdownIt-Anchor\" href=\"#展开运算符\">#</a> 展开运算符</h3>\n<h3 id=\"es6箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#es6箭头函数\">#</a> ES6 箭头函数</h3>\n<h3 id=\"javascript类\"><a class=\"markdownIt-Anchor\" href=\"#javascript类\">#</a> Javascript 类</h3>\n<h3 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> promise</h3>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/05/JS%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/",
            "url": "https://codingfxj.github.io/2021/07/05/JS%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/",
            "title": "JS图片懒加载",
            "date_published": "2021-07-05T10:08:41.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>主要思路：图片出现在可视区，让自定义属性 <code>data-src</code>  赋值给 <code>src</code>  显示图片</p>\n<h3 id=\"方案一\"><a class=\"markdownIt-Anchor\" href=\"#方案一\">#</a> 方案一</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    images.forEach(</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">image</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> imageTop = image.getBoundingClientRect().top</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (imageTop &lt; <span class=\"built_in\">window</span>.innerHeight) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> data_src = image.getAttribute(<span class=\"string\">&#x27;data-src&#x27;</span>)</span><br><span class=\"line\">                image.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, data_src)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案二观察者\"><a class=\"markdownIt-Anchor\" href=\"#方案二观察者\">#</a> 方案二 (观察者)</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> callback = <span class=\"function\"><span class=\"params\">enteries</span> =&gt;</span> &#123;</span><br><span class=\"line\">    enteries.forEach(<span class=\"function\"><span class=\"params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry.isIntersecting) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> img = entry.target</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data_src = img.getAttribute(<span class=\"string\">&#x27;data-src&#x27;</span>)</span><br><span class=\"line\">            img.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, data_src)</span><br><span class=\"line\">            observer.unobserve(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback)</span><br><span class=\"line\">images.forEach(<span class=\"function\"><span class=\"params\">image</span> =&gt;</span> &#123;</span><br><span class=\"line\">    observer.observe(image)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "懒加载"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/04/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E6%96%B9%E6%B3%95/",
            "url": "https://codingfxj.github.io/2021/07/04/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E6%96%B9%E6%B3%95/",
            "title": "手写常用高阶函数",
            "date_published": "2021-07-04T15:19:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"手写map\"><a class=\"markdownIt-Anchor\" href=\"#手写map\">#</a> 手写 map</h3>\n<p><strong>简单写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"> <span class=\"comment\">//es6map</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = arr1.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">//手写map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mymap</span>(<span class=\"params\">arr, mapCallback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(arr) || !arr.length || <span class=\"keyword\">typeof</span> mapCallback !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            result.push(mapCallback(arr[i], i, arr))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = mymap(arr1, <span class=\"function\">(<span class=\"params\">item, i, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n<p><strong>完整写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">6</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\">//写在数组原型链上</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> (fn + <span class=\"string\">&#x27; is not a function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultArr = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; currentArr.length; i++) &#123;</span><br><span class=\"line\">        resultArr[i] = fn.call(thisArg, currentArr[i], i, currentArr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(thisArg);<span class=\"comment\">//[6, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用手写map函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr1.myMap(<span class=\"function\">(<span class=\"params\">item, index, arr1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item * <span class=\"number\">100</span></span><br><span class=\"line\">&#125;, arr4)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不对空数组操作</span></span><br><span class=\"line\">[].myMap(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\"> &#125;) <span class=\"comment\">//[]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写filter\"><a class=\"markdownIt-Anchor\" href=\"#手写filter\">#</a> 手写 filter</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">Array</span>.prototype.myfilter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> (fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resArray = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curArray = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; curArray.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn.call(thisArg, curArray[i], i, curArray)) &#123;</span><br><span class=\"line\">            resArray.push(curArray[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resArray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">arr1 = [<span class=\"number\">111</span>, <span class=\"number\">22</span>, <span class=\"number\">234</span>, <span class=\"number\">999</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr6 = arr1.myfilter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr6: &#x27;</span>, arr6);<span class=\"comment\">//[234,999]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写reduce\"><a class=\"markdownIt-Anchor\" href=\"#手写reduce\">#</a> 手写 reduce</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 手写rudece</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myreduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, initValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initIndex</span><br><span class=\"line\">    <span class=\"keyword\">let</span> acc</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thisArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">//有无初始值</span></span><br><span class=\"line\">    acc = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span> ? thisArr[<span class=\"number\">0</span>] : initValue</span><br><span class=\"line\">    initIndex = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//数组是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thisArr.length == <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Reduce of empty array with no initial value&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = initIndex; i &lt; thisArr.length; i++) &#123;</span><br><span class=\"line\">        acc = fn(acc, thisArr[i], i, thisArr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr22 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> count = arr22.myreduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre + cur</span><br><span class=\"line\">&#125;) \t\t<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写some\"><a class=\"markdownIt-Anchor\" href=\"#手写some\">#</a> 手写 some</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.mysome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(fn) !== <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(fn + <span class=\"string\">&#x27; is not function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thisArr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; thisArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = fn.call(thisArg, thisArr[i], i, thisArr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res1 = arr1.mysome(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;myres: &#x27;</span>, res1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写join\"><a class=\"markdownIt-Anchor\" href=\"#手写join\">#</a> 手写 join</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myjoin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//join()默认无参数时为逗号</span></span><br><span class=\"line\">   str = <span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span> ? <span class=\"string\">&#x27;,&#x27;</span> : str</span><br><span class=\"line\">   \t <span class=\"comment\">//空字符串处理</span></span><br><span class=\"line\">     <span class=\"comment\">//if (str !== &#x27;&#x27;) &#123;</span></span><br><span class=\"line\">     <span class=\"comment\">//      str = str || &#x27;,&#x27;</span></span><br><span class=\"line\">     <span class=\"comment\">//  &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr.length - <span class=\"number\">1</span> === i) &#123;</span><br><span class=\"line\">            res += arr[i]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += arr[i] + str</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; arr.join(&#x27; - &#x27;): &quot;</span>, arr.myjoin(<span class=\"string\">&#x27;==&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; arr.join(&#x27; - &#x27;): &quot;</span>, arr.myjoin());</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写函数计时器\"><a class=\"markdownIt-Anchor\" href=\"#手写函数计时器\">#</a> 手写函数计时器</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> countTime = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;execute time&#x27;</span>);</span><br><span class=\"line\">    res = callback();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;execute time&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countTime(fn)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结合filter和every\"><a class=\"markdownIt-Anchor\" href=\"#结合filter和every\">#</a> 结合 filter 和 every</h3>\n<p>打印自除数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        arr.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.toString().split(<span class=\"string\">&#x27;&#x27;</span>).every(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item % <span class=\"built_in\">parseInt</span>(val) == <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自除数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; count(1, 200): &#x27;</span>, count(<span class=\"number\">1</span>, <span class=\"number\">200</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写tolowercase\"><a class=\"markdownIt-Anchor\" href=\"#手写tolowercase\">#</a> 手写 toLowerCase</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;hello VUE ,I WILL study hard&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(str.toLowerCase());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mytoLowerCase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/[A-Z]/g</span>, <span class=\"function\">(<span class=\"params\">char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(char.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">32</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; mytoLowerCase(str): &#x27;</span>, mytoLowerCase(str));</span><br><span class=\"line\"><span class=\"comment\">//hello vue ,i will study hard</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "手写高阶函数"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/04/JS%E9%97%AD%E5%8C%85/",
            "url": "https://codingfxj.github.io/2021/07/04/JS%E9%97%AD%E5%8C%85/",
            "title": "JS闭包",
            "date_published": "2021-07-04T01:03:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"闭包理解\"><a class=\"markdownIt-Anchor\" href=\"#闭包理解\">#</a> 闭包理解</h3>\n<p>变量根据作用域的不同分为两种：全局变量和局部变量</p>\n<blockquote>\n<ol>\n<li>\n<p>函数内部可以使用全局变量。</p>\n</li>\n<li>\n<p>函数外部不可以使用局部变量。</p>\n</li>\n<li>\n<p>当函数执行完毕，本作用域内的局部变量会销毁。</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>全局作用域</strong><br>\n (1) 全局作用域在页面打开时被创建，页面关闭时被销毁<br>\n (2) 编写在 script 标签中的变量和函数，作用域为全局，在页面的任意位置都可以访问到<br>\n (3) 在全局作用域中有全局对象 window, 代表一个浏览器窗口，由浏览器创建，可以直接调用<br>\n (4) 全局作用域中声明的变量和函数会作为 window 对象的属性和方法保存</p>\n<p><strong>函数作用域</strong><br>\n (1) 调用函数时，函数作用域被创建，函数执行完毕，函数作用域被销毁<br>\n (2) 每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的<br>\n (3) 在函数作用域中可以访问到全局作用域的变量，在函数外无法访问到函数作用域内的变量<br>\n (4) 在函数作用域中访问变量、函数时，会先在自身作用域中寻找，若没有找到，则会到函数的上一级作用域中寻找，一直到全局作用域</p>\n<p><strong>闭包 (closure) 理解：一个作用域可以访问另外一个函数内部的局部变量</strong></p>\n<blockquote>\n<p>主要实现思路：函数内部返回函数</p>\n<p>主要作用：延伸了变量的作用范围（生命周期）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//产生闭包</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)<span class=\"comment\">//10</span></span><br><span class=\"line\">        <span class=\"comment\">//由于fn是闭包函数，所以num这个变量不会在调用了fn()后立即销毁，</span></span><br><span class=\"line\">        <span class=\"comment\">//因为还有别的函数会使用这个变量。只有等所以函数都调用完后才会销毁这个变量。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>定时器中的闭包</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//闭包应用-3秒钟之后,打印所有li元素的内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.nav&#x27;</span>).querySelectorAll(<span class=\"string\">&#x27;li&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(lis[i].innerHTML);</span><br><span class=\"line\">            &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包应用\"><a class=\"markdownIt-Anchor\" href=\"#闭包应用\">#</a> 闭包应用</h3>\n<p><strong>单例模式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> singleTon = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//产生闭包，instance会被缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">//全局变量接收的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleTon</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!instance) instance = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p><strong>防抖函数</strong></p>\n<p>用于避免用户输入框频繁自动发送 <code>ajax</code>  请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//防抖函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        timer &amp;&amp; <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            timer = <span class=\"number\">0</span></span><br><span class=\"line\">            func.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">        &#125;, time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input.addEventListener(<span class=\"string\">&#x27;keyup&#x27;</span>,</span><br><span class=\"line\">        debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;<span class=\"comment\">// 事件处理逻辑</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e.target.value) </span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p><strong>节流</strong></p>\n<p>解决轮播图按钮多次连续点击问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不运用闭包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openLock</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    lock = <span class=\"literal\">true</span>;<span class=\"comment\">//开锁</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">goNextBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lock) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    goNext();</span><br><span class=\"line\">    time = <span class=\"number\">0</span>;</span><br><span class=\"line\">    lock = <span class=\"literal\">false</span>;<span class=\"comment\">//点完按钮，关锁</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(openLock, <span class=\"number\">800</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//应用闭包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> clickButton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lock = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!lock) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11111&#x27;</span>);</span><br><span class=\"line\">        lock = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                lock = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">button.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, clickButton)</span><br></pre></td></tr></table></figure>\n<p><strong>模拟私有方法或变量</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cMoney</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> money = <span class=\"number\">0</span> <span class=\"comment\">// 经验值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">getMoney</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> money</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">changeMoney</span>(<span class=\"params\">num</span>)</span> &#123;</span><br><span class=\"line\">            money += num</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = cMoney()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.getMoney()) <span class=\"comment\">// 0</span></span><br><span class=\"line\">p.changeMoney(<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.getMoney()) <span class=\"comment\">// 1000</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包弊端\"><a class=\"markdownIt-Anchor\" href=\"#闭包弊端\">#</a> 闭包弊端</h3>\n<blockquote>\n<p>常驻内存 会增，大内存的使用量， 使用不当会造成内存泄露。解决办法：函数调用完手动回收变量。</p>\n</blockquote>\n",
            "tags": [
                "JS",
                "闭包"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/07/04/JS%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/",
            "url": "https://codingfxj.github.io/2021/07/04/JS%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/",
            "title": "JS中的this指向",
            "date_published": "2021-07-04T00:19:22.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"函数内this指向\"><a class=\"markdownIt-Anchor\" href=\"#函数内this指向\">#</a> 函数内 this 指向</h3>\n<table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>this 指向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通函数调用</td>\n<td>window</td>\n</tr>\n<tr>\n<td>构造函数调用</td>\n<td>实例对象</td>\n</tr>\n<tr>\n<td>对象方法调用</td>\n<td>该方法所属的实例对象</td>\n</tr>\n<tr>\n<td>事件绑定方法</td>\n<td>绑定事件对象</td>\n</tr>\n<tr>\n<td>定时器函数</td>\n<td>window</td>\n</tr>\n<tr>\n<td>立即执行函数</td>\n<td>window</td>\n</tr>\n<tr>\n<td>箭头函数</td>\n<td>函数定义位置的上下文 this</td>\n</tr>\n<tr>\n<td>严格模式下全局作用域中函数中的 this</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//箭头函数this</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">say</span>: <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//对象不产生作用域</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age) <span class=\"comment\">//100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"改变this指向\"><a class=\"markdownIt-Anchor\" href=\"#改变this指向\">#</a> 改变 this 指向</h3>\n<p>常用的 三种方法：bind ()、call ()、apply ()</p>\n<table>\n<thead>\n<tr>\n<th>传参形式</th>\n<th>参数和返回值</th>\n<th>执行时机</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fun.call(thisArg, arg1, arg2, …)</td>\n<td>函数的返回值，即是调用函数</td>\n<td>立即执行</td>\n<td>通常用于继承</td>\n</tr>\n<tr>\n<td>fun.apply(thisArg, [argsArray])</td>\n<td>必须是数组，函数的返回值</td>\n<td>立即执行</td>\n<td>数组处理</td>\n</tr>\n<tr>\n<td>fun.bind(thisArg, arg1, arg2, …)</td>\n<td>返回指定 this 和参数的新函数</td>\n<td>不会立即执行函数</td>\n<td>改变定时器内部的 this 指向</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"this常见问题\"><a class=\"markdownIt-Anchor\" href=\"#this常见问题\">#</a> this 常见问题</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法2.let vm = new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">list</span>:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"title\">getData</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法1.var self = this</span></span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...\t</span></span><br><span class=\"line\">    <span class=\"comment\">//方法3.&#125;).then(res =&gt;&#123;</span></span><br><span class=\"line\">    &#125;).then(funcion(res))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = res.data</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.meta.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.list = result;</span><br><span class=\"line\">            <span class=\"comment\">//this的指向问题，此处没有获取到list</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "this指向"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/22/%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/",
            "url": "https://codingfxj.github.io/2021/06/22/%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/",
            "title": "数组常见应用",
            "date_published": "2021-06-22T11:38:57.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"类型判断四种方法\"><a class=\"markdownIt-Anchor\" href=\"#类型判断四种方法\">#</a> 类型判断四种方法</h3>\n<p>8 种数据类型： <code>Number、String、Boolean、Null、undefined、Object、Symbol、bigInt</code></p>\n<p>Object 类型包含：Date、function、Array、正则 reg、</p>\n<blockquote>\n<p>方法一：<strong>typeof</strong> 适合判断基本数据类型</p>\n<p>arr, json, null, date, reg, error 全部被检测为 object 类型</p>\n</blockquote>\n<blockquote>\n<p>方法二：<strong>instanceof</strong> 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型</p>\n</blockquote>\n<blockquote>\n<p>方法三：<strong>constructor</strong>  对 null 和 undefined 无效对象不管用，没有 constructor ，</p>\n<p>函数的 constructor 不稳定，容易被修改</p>\n</blockquote>\n<blockquote>\n<p>方法四：<strong>toString()</strong> ，<strong>最准确</strong>，Object 的原型方法，</p>\n<p>使用方式  <code>Object.prototype.toString.call(xxx)</code>   返回 <code>[object xxx]</code></p>\n</blockquote>\n<h3 id=\"判断是否为数组\"><a class=\"markdownIt-Anchor\" href=\"#判断是否为数组\">#</a> 判断是否为数组</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"number\">2.</span> arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"number\">3.</span> arr.constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arr) === <span class=\"string\">&#x27;[object Array]&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5.</span> <span class=\"built_in\">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组-对象-伪数组的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组-对象-伪数组的区别\">#</a> 数组、对象、伪数组的区别</h3>\n<p><strong>创建方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">//字面量赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 构造函数创建</span></span><br><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>关系</strong></p>\n<blockquote>\n<p>数组属于对象，所有 JavaScript 的内置构造函数都是继承自  <code>Object.prototype</code> ，new Array () 或 [] 创建出来的数组对象，都会拥有  <code>Object.prototype</code>  的属性值。</p>\n</blockquote>\n<p><strong>区别</strong></p>\n<blockquote>\n<p>区别 1：对象没有数组 <code>Array.prototype</code>  的属性值</p>\n<p>区别 2：对象没有数组的 length 属性</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;a&#x27;</span>; <span class=\"comment\">//&#123;&quot;2&quot;:&quot;a&quot;&#125;</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//[null,null,&quot;a&quot;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"伪数组转数组\"><a class=\"markdownIt-Anchor\" href=\"#伪数组转数组\">#</a> 伪数组转数组</h3>\n<blockquote>\n<p>伪数组：拥有 length 属性和索引，索引为非负整数，伪数组是一个 Object</p>\n<p>常见伪数组： <code>arguments</code> ， <code>dom对象</code> ， <code>dom的childNodes</code> ， <code>jquery</code>  对象，上传文件时选择的 file 对象。</p>\n<p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多算法。</p>\n<p>例如： <code>var arr = Array.prototype.slice.call(arguments)</code></p>\n</blockquote>\n<p>判断是否为伪数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArrayLike</span>(<span class=\"params\">o</span>) </span>&#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o &amp;&amp;                                <span class=\"comment\">// o is not null, undefined, etc.</span></span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> o === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;            <span class=\"comment\">// o is an object</span></span><br><span class=\"line\">            <span class=\"built_in\">isFinite</span>(o.length) &amp;&amp;               <span class=\"comment\">// o.length is a finite number</span></span><br><span class=\"line\">            o.length &gt;= <span class=\"number\">0</span> &amp;&amp;                    <span class=\"comment\">// o.length is non-negative</span></span><br><span class=\"line\">            o.length===<span class=\"built_in\">Math</span>.floor(o.length) &amp;&amp;  <span class=\"comment\">// o.length is an integer</span></span><br><span class=\"line\">            o.length &lt; <span class=\"number\">4294967296</span>)              <span class=\"comment\">// o.length &lt; 2^32</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                        <span class=\"comment\">// Then o is array-like</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                       <span class=\"comment\">// Otherwise it is not</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray) === <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(arr) === <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一（适用于ie8+）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"><span class=\"comment\">//或Array.prototype.slice().call(arguments)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">likeArray</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; likeArray.length; i++)&#123;</span><br><span class=\"line\">\t\tarr[arr.length] = likeArray[i];</span><br><span class=\"line\">        <span class=\"comment\">// arr.push(likeArray[i])</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法三</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组拼接\"><a class=\"markdownIt-Anchor\" href=\"#数组拼接\">#</a> 数组拼接</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"comment\">//方式一:适用小数组，对大型的数组,或需要多次重复处理时, 内存被限制</span></span><br><span class=\"line\">arr1.concat(arr2) </span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2) <span class=\"comment\">//arr1.push.apply(arr1,arr2)</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法三 : unshift插入到前面</span></span><br><span class=\"line\"> <span class=\"built_in\">Array</span>.prototype.unshift.apply(arr1, arr2)  <span class=\"comment\">//arr1.unshift.apply(arr1,arr2)</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法四</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法五</span></span><br><span class=\"line\">[...arr1,...arr2]</span><br><span class=\"line\"><span class=\"comment\">//方法六 循环插入:很土且难以维护</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">    arr1.push( arr2[i] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法六 reduce</span></span><br><span class=\"line\">arr1 = arr2.reduce( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pre,val</span>)</span>&#123;</span><br><span class=\"line\">    pre.push( val );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;, arr1 );</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "数组"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
            "title": "JS常用高阶函数",
            "date_published": "2021-06-09T10:00:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"es6高阶函数之filter\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之filter\">#</a> ES6 高阶函数之 filter</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<blockquote>\n<ul>\n<li>通过提供函数实现的依次测试的所有元素，true 则表示通过，如果为 false 则失败。</li>\n<li>返回值是一个新数组，由通过测试为 true 的所有元素组成</li>\n<li>如果没有任何数组元素通过测试，则返回空数组。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>满足条件的留下，是对原数组的过滤。</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>\t必须，遍历到的当前元素值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span> \t可选，当前元素的索引值</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">arr</span>\t\t可选，当前元素属于的数组对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h4>\n<h5 id=\"过滤小于100\"><a class=\"markdownIt-Anchor\" href=\"#过滤小于100\">#</a> 过滤小于 100</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">110</span>,<span class=\"number\">60</span>,<span class=\"number\">190</span>,<span class=\"number\">50</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newNums =nums.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt; <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newNums)<span class=\"comment\">//[20,30,60,50]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"返回奇数元素\"><a class=\"markdownIt-Anchor\" href=\"#返回奇数元素\">#</a> 返回奇数元素</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> x%<span class=\"number\">2</span>!==<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;))<span class=\"comment\">//[1,3,5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r,arr= [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;pear&#x27;</span>, <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>];</span><br><span class=\"line\">r=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr.indexOf(value)===index;</span><br><span class=\"line\"><span class=\"comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置相等,表示是同一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//后续的重复元素位置与indexOf返回的位置不相等，表示元素重复并且过滤。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);<span class=\"comment\">//[&quot;apple&quot;, &quot;strawberry&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.filter( <span class=\"function\">(<span class=\"params\">element, index, self</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.indexOf( element ) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr2 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr1 );</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"找出素数\"><a class=\"markdownIt-Anchor\" href=\"#找出素数\">#</a> 找出素数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">20</span>,<span class=\"number\">37</span>];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> result=arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(value==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">Math</span>.sqrt(value)+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(value%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之map\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之map\">#</a> ES6 高阶函数之 map</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\">#</a> 定义</h4>\n<blockquote>\n<p>原数组中的每个元素依次调用一个指定方法后，</p>\n<p>返回返回值组成的新数组</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>\n<p><strong>原始数组不发生改变</strong></p>\n</li>\n<li>\n<p><strong>不会对空数组进行检测</strong></p>\n</li>\n<li>\n<p><strong>对原数组的加工，返回加工后新数组</strong></p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">currentValue</span>  数组中正在处理的当前元素。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">index</span>可选  数组中正在处理的当前元素的索引。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">array</span>可选  <span class=\"title\">map</span> 方法被调用的数组。</span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">thisArg</span>可选 执行 <span class=\"title\">callback</span> 函数时使用的<span class=\"title\">this</span> 值。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\">#</a> 用法</h4>\n<h5 id=\"返回数组元素平方后的新数组\"><a class=\"markdownIt-Anchor\" href=\"#返回数组元素平方后的新数组\">#</a> 返回数组元素平方后的新数组</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>)</span>&#123;  <span class=\"comment\">//定义一个平方函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(pow);  <span class=\"comment\">//map()传入的是函数对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);       <span class=\"comment\">//结果：[1,4,9,16,25,36,49,64,81];</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用给定函数创建新字符串\"><a class=\"markdownIt-Anchor\" href=\"#用给定函数创建新字符串\">#</a> 用给定函数创建新字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapString = <span class=\"function\">(<span class=\"params\">str, fn</span>) =&gt;</span></span><br><span class=\"line\">  str</span><br><span class=\"line\">    .split(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> fn(c, i, str))</span><br><span class=\"line\">    .join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">mapString(<span class=\"string\">&#x27;lorem ipsum&#x27;</span>, <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.toUpperCase()); <span class=\"comment\">// &#x27;LOREM IPSUM&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"把二维数组变字符串\"><a class=\"markdownIt-Anchor\" href=\"#把二维数组变字符串\">#</a> 把二维数组变字符串</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\">(<span class=\"params\">arr, delimiter = <span class=\"string\">&#x27;,&#x27;</span></span>) =&gt;</span></span><br><span class=\"line\">\tarr.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> </span><br><span class=\"line\">\t\t v.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> </span><br><span class=\"line\"> (<span class=\"built_in\">isNaN</span>(x) ? <span class=\"string\">`&quot;<span class=\"subst\">$&#123;x.replace(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&#x27;&quot;&quot;&#x27;</span>)&#125;</span>&quot;`</span> :x)).join(delimiter)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          .join(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"数字序列转为数组删除符号\"><a class=\"markdownIt-Anchor\" href=\"#数字序列转为数组删除符号\">#</a> 数字序列转为数组，删除符号</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> digitize = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [...<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.abs(n)&#125;</span>`</span>].map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(i));</span><br><span class=\"line\">digitize(<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">digitize(-<span class=\"number\">123</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"拿到所有图片的图片名称并以数组形式返回\"><a class=\"markdownIt-Anchor\" href=\"#拿到所有图片的图片名称并以数组形式返回\">#</a> 拿到所有图片的图片名称并以数组形式返回</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getImages = <span class=\"function\">(<span class=\"params\">el, includeDuplicates = <span class=\"literal\">false</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> images = [...el.getElementsByTagName(<span class=\"string\">&#x27;img&#x27;</span>)].</span><br><span class=\"line\">  map(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span></span><br><span class=\"line\">    img.getAttribute(<span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> includeDuplicates ? images :</span><br><span class=\"line\">  [...new <span class=\"built_in\">Set</span>(images)];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">true</span>); </span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;image1.png&#x27;, &#x27;...&#x27;]</span></span><br><span class=\"line\">getImages(<span class=\"built_in\">document</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;...&#x27;] 名字去重</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"vue中重复渲染组件\"><a class=\"markdownIt-Anchor\" href=\"#vue中重复渲染组件\">#</a> vue 中重复渲染组件</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;ele&#x27;</span>,&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">createElement</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">\t\t\t    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">length</span>:<span class=\"number\">5</span></span><br><span class=\"line\">\t\t\t\t&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> createElement(Child);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之reduce\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之reduce\">#</a> ES6 高阶函数之 reduce</h3>\n<h4 id=\"定义-3\"><a class=\"markdownIt-Anchor\" href=\"#定义-3\">#</a> 定义</h4>\n<blockquote>\n<p><strong>原始数组不发生改变</strong></p>\n<p><strong>reduce () 对于空数组是不会执行回调函数的</strong></p>\n</blockquote>\n<h4 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback , [initialValue])</span><br><span class=\"line\"><span class=\"comment\">//callback （执行数组中每个值的函数，包含四个参数）</span></span><br><span class=\"line\"><span class=\"comment\">//initialValue （作为第一次调用 callback 的第一个参数。）</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有提供initialValue，从索引1的地方开始执行callback方法，跳过第一个索引。</span></span><br><span class=\"line\"><span class=\"comment\">//如果提供initialValue，从索引0开始</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"callback-函数\"><a class=\"markdownIt-Anchor\" href=\"#callback-函数\">#</a> callback 函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行数组中每个值的callback 函数，包含四个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;，<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1、<strong>previousValue</strong> ：上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>\n2、<strong>currentValue</strong> ：数组中当前被处理的元素<br>\n 3、<strong>index</strong> ：当前元素在数组中的索引<br>\n 4、<strong>array</strong> ：调用 reduce 函数 的数组</p>\n</blockquote>\n<h4 id=\"高级用法\"><a class=\"markdownIt-Anchor\" href=\"#高级用法\">#</a> 高级用法</h4>\n<h5 id=\"数组求和\"><a class=\"markdownIt-Anchor\" href=\"#数组求和\">#</a> 数组求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">...arr</span>) =&gt;</span> [...arr].reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>);</span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\">sum(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组去重-2\"><a class=\"markdownIt-Anchor\" href=\"#数组去重-2\">#</a> 数组去重</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!pre.includes(cur))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"计算两个或多个数字的平均值\"><a class=\"markdownIt-Anchor\" href=\"#计算两个或多个数字的平均值\">#</a> 计算两个或多个数字的平均值</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> average = <span class=\"function\">(<span class=\"params\">...nums</span>) =&gt;</span></span><br><span class=\"line\">  nums.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"number\">0</span>) / nums.length;</span><br><span class=\"line\">average(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 2</span></span><br><span class=\"line\">average(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将二维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将二维数组转化为一维\">#</a> 将二维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.concat(cur)</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"将多维数组转化为一维\"><a class=\"markdownIt-Anchor\" href=\"#将多维数组转化为一维\">#</a> 将多维数组转化为一维</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]]]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>pre.concat(<span class=\"built_in\">Array</span>.isArray(cur)?newArr(cur):cur),[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr(arr)); <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"对象里的属性求和\"><a class=\"markdownIt-Anchor\" href=\"#对象里的属性求和\">#</a> 对象里的属性求和</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;math&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;chinese&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;english&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">score</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = result.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur.score + prev;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">//60</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"统计数组中每个元素出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#统计数组中每个元素出现的次数\">#</a> 统计数组中每个元素出现的次数</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr11 = [<span class=\"number\">111</span>, <span class=\"number\">22</span>, <span class=\"number\">111</span>, <span class=\"number\">234</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">111</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr11.reduce(<span class=\"function\">(<span class=\"params\">pre, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pre[item] = pre[item] ? pre[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//&#123; &#x27;22&#x27;: 1, &#x27;111&#x27;: 3, &#x27;234&#x27;: 1, &#x27;999&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tiff&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nameNum = names.reduce(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(cur <span class=\"keyword\">in</span> pre)&#123;</span><br><span class=\"line\">    pre[cur]++</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    pre[cur] = <span class=\"number\">1</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;,&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nameNum); <span class=\"comment\">//&#123;Alice: 2, Bob: 1, Tiff: 1, Bruce: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"es6高阶函数之sort\"><a class=\"markdownIt-Anchor\" href=\"#es6高阶函数之sort\">#</a> ES6 高阶函数之 sort</h3>\n<h4 id=\"定义-4\"><a class=\"markdownIt-Anchor\" href=\"#定义-4\">#</a> 定义</h4>\n<blockquote>\n<p><code>sort() </code> 方法用原地算法对数组的元素进行排序，并返回数组，</p>\n<p>该排序方法会在原数组上直接进行排序，并<strong>不会生成一个排好序的新数组</strong>。</p>\n<p>排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<h4 id=\"语法-4\"><a class=\"markdownIt-Anchor\" href=\"#语法-4\">#</a> 语法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.sort(sortby)</span><br><span class=\"line\"><span class=\"comment\">//sort() 在没有参数时，返回的结果是按升序来排列的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortby\t可选。规定排序顺序。必须是函数。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>function(a, b)(return a- b)</strong></p>\n<ul>\n<li>如果指明了参数：compare (a, b) ，（a, b 是两个要比较的元素，a 在 b 前面）那么数组会按照该函数的返回值排序</li>\n<li>如果 compare (a, b) 返回值 &lt; 0 ，a 会被排列到 b 之前，即参数 a, b 的顺序保存原样；</li>\n<li>如果 compare (a, b) 返回值 = 0 ，a 和 b 的相对位置不变。（ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守）</li>\n<li>如果 compare (a, b) 返回值 &gt; 0 ，b 会被排列到 a 之前。即交换参数 a, b 的顺序</li>\n</ul>\n</blockquote>\n<h4 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\">#</a> 用法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sortby= <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> koala=[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].sort(sortby)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(koala);</span><br><span class=\"line\"><span class=\"comment\">// [1 , 2 , 10 , 20]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义高阶函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义高阶函数\">#</a> 自定义高阶函数</h3>\n<h4 id=\"字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\"><a class=\"markdownIt-Anchor\" href=\"#字符串数组转换为整数数组每个元素代表原始数组中字符串的长度\">#</a> 字符串数组转换为整数数组，每个元素代表原始数组中字符串的长度。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strArray=[<span class=\"string\">&#x27;JavaScript&#x27;</span>,<span class=\"string\">&#x27;PHP&#x27;</span>,<span class=\"string\">&#x27;JAVA&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapForEach</span>(<span class=\"params\">arr,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newArray = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        newArray.push(&#123;</span><br><span class=\"line\">            fn(arr[i])</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lenArray = mapForEach(strArray,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.length;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lenArray);<span class=\"comment\">//[10,3,4,1,6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>代码分析</strong></p>\n<ul>\n<li>创建了一个高阶函数 mapForEach ，它接受一个数组和一个回调函数 fn。</li>\n<li>它循环遍历传入的数组，并在每次迭代时在 newArray.push 方法调用回调函数 fn 。</li>\n<li>回调函数 fn 接收数组的当前元素并返回该元素的长度，该元素存储在 newArray 中。</li>\n<li>for 循环完成后，newArray 被返回并赋值给 lenArray。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "JS",
                "ES6",
                "高阶函数"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "title": "JS代码片段之数组20-50",
            "date_published": "2021-06-09T09:02:30.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"js代码片段之数组20-60\"><a class=\"markdownIt-Anchor\" href=\"#js代码片段之数组20-60\">#</a> JS 代码片段之数组 20-60</h3>\n<h4 id=\"检查数组是否满足条件\"><a class=\"markdownIt-Anchor\" href=\"#检查数组是否满足条件\">#</a> 检查数组是否满足条件</h4>\n<blockquote>\n<p>every () 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p>\n<p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>\n如果所有元素都满足条件，则返回 true。</p>\n<p><strong>every () 不会改变原始数组</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ages.every(checkAdult);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueElements = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\">uniqueElements([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组合并兼去重\"><a class=\"markdownIt-Anchor\" href=\"#数组合并兼去重\">#</a> 数组合并兼去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> union = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...a, ...b]));</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查是否是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#检查是否是为等值的数组\">#</a> 检查是否是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqual = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val === arr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// false</span></span><br><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入之后是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入之后是为等值的数组\">#</a> 判断数组（四舍五入）之后是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqualBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;  <span class=\"keyword\">const</span> eql = fn(arr[<span class=\"number\">0</span>]);  <span class=\"keyword\">return</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> fn(val) === eql);&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">1.3</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.6</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组的值是否重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组的值是否重复\">#</a> 判断数组的值是否重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUnique = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入后是否有值重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入后是否有值重复\">#</a> 判断数组（四舍五入）后是否有值重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUniqueBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr.map(fn)).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.4</span>, <span class=\"number\">2.9</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">2.4</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回原始数组元素调用函数处理后的值  </span></span><br><span class=\"line\">&#125;, thisArg)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>callback 生成新数组元素的函数，使用三个参数：<br>\ncurrentValue  数组中正在处理的当前元素。<br>\nindex 可选  \t数组中正在处理的当前元素的索引。<br>\narray 可选  \tmap 方法被调用的数组。<br>\nthisArg 可选 \t执行 callback 函数时使用的 this 值。<br>\n<strong>不会对空数组进行检测， map () 不会改变原始数组。</strong></p>\n</blockquote>\n<h4 id=\"判断数组是否满足要求\"><a class=\"markdownIt-Anchor\" href=\"#判断数组是否满足要求\">#</a> 判断数组是否满足要求</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> someany = <span class=\"function\">(<span class=\"params\">arr, fn = <span class=\"built_in\">Boolean</span></span>) =&gt;</span> arr.some(fn);<span class=\"comment\">//是否有一个满足要求</span></span><br><span class=\"line\"><span class=\"comment\">// const any = (arr, fn = Boolean) =&gt; arr.every(fn);//每一个是否满足要求</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = someany([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>], <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &gt;= <span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = someany([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分割数组\"><a class=\"markdownIt-Anchor\" href=\"#分割数组\">#</a> 分割数组</h4>\n<blockquote>\n<p><code>arrayObject.slice(start,end)</code> ，slice () 方法可从已有的数组中返回选定的元素，</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> aperture = <span class=\"function\">(<span class=\"params\">n, arr</span>) =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//n表示分割成多长的数组</span></span><br><span class=\"line\">     n &gt; arr.length ? [] :arr.slice(n - <span class=\"number\">1</span>).map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> arr.slice(i, i + n));<span class=\"comment\">//v是当前值，i当前索引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"> aperture(<span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [[1, 2], [2, 3], [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(3, [1, 2, 3, 4]); // [[1, 2, 3], [2, 3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(5, [1, 2, 3, 4]); // []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"转为数组\"><a class=\"markdownIt-Anchor\" href=\"#转为数组\">#</a> 转为数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> castArray = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(val) ? val : [val]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"从数组中删除假值\"><a class=\"markdownIt-Anchor\" href=\"#从数组中删除假值\">#</a> 从数组中删除假值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(item);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compact = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> * <span class=\"number\">23</span>, <span class=\"literal\">NaN</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">34</span>]); </span><br><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3, &#x27;a&#x27;, &#x27;s&#x27;, 34 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"求一个值在数组出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#求一个值在数组出现的次数\">#</a> 求一个值在数组出现的次数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCount = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span> arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v === val ? a + <span class=\"number\">1</span> : a), <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中最频繁的元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中最频繁的元素\">#</a> 返回数组中最频繁的元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mostFrequent = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.entries(</span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      a[v] = a[v] ? a[v] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\">  ).reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v[<span class=\"number\">1</span>] &gt;= a[<span class=\"number\">1</span>] ? v : a), [<span class=\"literal\">null</span>, <span class=\"number\">0</span>])[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">mostFrequent([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分辨两个数组的区别不去重\"><a class=\"markdownIt-Anchor\" href=\"#分辨两个数组的区别不去重\">#</a> 分辨两个数组的区别（不去重）</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> difference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !s.has(x));</span><br><span class=\"line\">&#125;;<span class=\"comment\">//找到a数组中b数组中没有的值</span></span><br><span class=\"line\">difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 3]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueSymmetricDifference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> </span><br><span class=\"line\">[  </span><br><span class=\"line\">    ...new <span class=\"built_in\">Set</span>([    </span><br><span class=\"line\">    ...a.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !b.includes(v)),    </span><br><span class=\"line\">    ...b.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !a.includes(v)), </span><br><span class=\"line\">\t]),</span><br><span class=\"line\">];</span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组的后n个元素\"><a class=\"markdownIt-Anchor\" href=\"#删除数组的后n个元素\">#</a> 删除数组的后 n 个元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去除数组最后一个值 const del = arr =&gt; arr.slice(0, -1);</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dropRight = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> arr.slice(<span class=\"number\">0</span>, -n);</span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">42</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组元素直到满足函数\"><a class=\"markdownIt-Anchor\" href=\"#删除数组元素直到满足函数\">#</a> 删除数组元素直到满足函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dropRightWhile = <span class=\"function\">(<span class=\"params\">arr, func</span>) =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightIndex = arr.length;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rightIndex-- &amp;&amp; !func(arr[rightIndex]));  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, rightIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从右往左直到索引大于3</span></span><br><span class=\"line\">dropWhile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n &gt;= <span class=\"number\">3</span>); <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除第一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除第一个元素以外的所有元素\">#</a> 返回数组中除第一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tail = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> (arr.length &gt; <span class=\"number\">1</span> ? arr.slice(<span class=\"number\">1</span>) : arr);</span><br><span class=\"line\">tail([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">tail([<span class=\"number\">1</span>]); <span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除最后一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除最后一个元素以外的所有元素\">#</a> 返回数组中除最后一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initial = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">initial([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中每个n元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中每个n元素\">#</a> 返回数组中每个 “n” 元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> everyNth = <span class=\"function\">(<span class=\"params\">arr, nth</span>) =&gt;</span> arr.filter(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> i % nth === nth - <span class=\"number\">1</span>);</span><br><span class=\"line\">everyNth([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成n位斐波那契数组\"><a class=\"markdownIt-Anchor\" href=\"#生成n位斐波那契数组\">#</a> 生成 n 位斐波那契数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;).reduce(</span><br><span class=\"line\">   <span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class=\"number\">1</span> ? acc[i - <span class=\"number\">1</span>] + acc[i - <span class=\"number\">2</span>] : i),[])</span><br><span class=\"line\">fibonacci(<span class=\"number\">6</span>); <span class=\"comment\">// [0, 1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定个数的随机数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定个数的随机数组\">#</a> 生成指定个数的随机数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateItems = <span class=\"function\">(<span class=\"params\">n, fn</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;, <span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> fn(i));</span><br><span class=\"line\">generateItems(<span class=\"number\">10</span>, <span class=\"built_in\">Math</span>.random);</span><br><span class=\"line\"><span class=\"comment\">// [0.21, 0.08, 0.40, 0.96, 0.96, 0.24, 0.19, 0.96, 0.42, 0.70]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在数组的指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#在数组的指定位置插入多个值返回新数组\">#</a> 在数组的指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arrayObject.splice(index,howmany,item1,.....,itemX)</span></span><br><span class=\"line\"><span class=\"comment\">// index\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span></span><br><span class=\"line\"><span class=\"comment\">// howmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。</span></span><br><span class=\"line\"><span class=\"comment\">// item1, ..., itemX\t可选。向数组添加的新项目。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> insertAt = <span class=\"function\">(<span class=\"params\">arr, i, ...v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  arr.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, ...v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">insertAt(myArray, <span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// myArray = [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherArray = [<span class=\"number\">2</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">insertAt(otherArray, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>); <span class=\"comment\">// otherArray = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#指定位置插入多个值返回新数组\">#</a> 指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shank = <span class=\"function\">(<span class=\"params\">arr, index = <span class=\"number\">0</span>, delCount = <span class=\"number\">0</span>, ...elements</span>) =&gt;</span></span><br><span class=\"line\">  arr</span><br><span class=\"line\">    .slice(<span class=\"number\">0</span>, index)</span><br><span class=\"line\">    .concat(elements)</span><br><span class=\"line\">    .concat(arr.slice(index + delCount));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;alpha&#x27;</span>, <span class=\"string\">&#x27;bravo&#x27;</span>, <span class=\"string\">&#x27;charlie&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> namesAndDelta = shank(names, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;delta&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;delta&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> namesNoBravo = shank(names, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names); <span class=\"comment\">// [&#x27;alpha&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数组将生成的数组中的元素解组\"><a class=\"markdownIt-Anchor\" href=\"#创建数组将生成的数组中的元素解组\">#</a> 创建数组，将生成的数组中的元素解组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unzip = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> (val.forEach(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> acc[i].push(v)), acc),</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">      <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.max(...arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.length))</span><br><span class=\"line\">    &#125;).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [])</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>, <span class=\"literal\">false</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true, false]]</span></span><br><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对提供的数组元素排列组合并生成新数组\"><a class=\"markdownIt-Anchor\" href=\"#对提供的数组元素排列组合并生成新数组\">#</a> 对提供的数组元素排列组合并生成新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xProd = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span></span><br><span class=\"line\">  a.reduce(<span class=\"function\">(<span class=\"params\">acc, x</span>) =&gt;</span> acc.concat(b.map(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> [x, y])), []);</span><br><span class=\"line\">xProd([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// [[1, &#x27;a&#x27;], [1, &#x27;b&#x27;], [2, &#x27;a&#x27;], [2, &#x27;b&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用迭代器函数和初始值构建数组\"><a class=\"markdownIt-Anchor\" href=\"#使用迭代器函数和初始值构建数组\">#</a> 使用迭代器函数和初始值构建数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unfold = <span class=\"function\">(<span class=\"params\">fn, seed</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [],</span><br><span class=\"line\">    val = [<span class=\"literal\">null</span>, seed];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((val = fn(val[<span class=\"number\">1</span>]))) result.push(val[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> (n &gt; <span class=\"number\">50</span> ? <span class=\"literal\">false</span> : [-n, n + <span class=\"number\">10</span>]);</span><br><span class=\"line\">unfold(f, <span class=\"number\">10</span>); <span class=\"comment\">// [-10, -20, -30, -40, -50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象或其他迭代器-创建键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#对象或其他迭代器-创建键值对数组\">#</a> 对象或其他迭代器 创建键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toPairs = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span></span><br><span class=\"line\">  obj[<span class=\"built_in\">Symbol</span>.iterator] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span> &amp;&amp; obj.entries <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Array</span>.from(obj.entries())</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.entries(obj);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toPairs(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]</span></span><br><span class=\"line\">toPairs([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>]); <span class=\"comment\">// [[0, 2], [1, 4], [2, 8]]</span></span><br><span class=\"line\">toPairs(<span class=\"string\">&#x27;shy&#x27;</span>); <span class=\"comment\">// [[&#x27;0&#x27;, &#x27;s&#x27;], [&#x27;1&#x27;, &#x27;h&#x27;], [&#x27;2&#x27;, &#x27;y&#x27;]]</span></span><br><span class=\"line\">toPairs(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>])); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;a&#x27;], [&#x27;b&#x27;, &#x27;b&#x27;], [&#x27;c&#x27;, &#x27;c&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hsl-值转数组\"><a class=\"markdownIt-Anchor\" href=\"#hsl-值转数组\">#</a> hsl 值转数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toHSLArray = <span class=\"function\"><span class=\"params\">hslStr</span> =&gt;</span> hslStr.match(<span class=\"regexp\">/\\d+/g</span>).map(<span class=\"built_in\">Number</span>);</span><br><span class=\"line\">toHSLArray(<span class=\"string\">&#x27;hsl(50, 10%, 10%)&#x27;</span>); <span class=\"comment\">// [50, 10, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回出现在两个数组中的元素数组\"><a class=\"markdownIt-Anchor\" href=\"#返回出现在两个数组中的元素数组\">#</a> 返回出现在两个数组中的元素数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> similarity = <span class=\"function\">(<span class=\"params\">arr, values</span>) =&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> values.includes(v));</span><br><span class=\"line\">similarity([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打乱数组顺序\"><a class=\"markdownIt-Anchor\" href=\"#打乱数组顺序\">#</a> 打乱数组顺序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shuffle = <span class=\"function\">(<span class=\"params\">[...arr]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> i = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * m--);</span><br><span class=\"line\">    [arr[m], arr[i]] = [arr[i], arr[m]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">shuffle(foo); <span class=\"comment\">// [2, 3, 1], foo = [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"随机得到数组中的值\"><a class=\"markdownIt-Anchor\" href=\"#随机得到数组中的值\">#</a> 随机得到数组中的值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sample = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * arr.length)];</span><br><span class=\"line\">sample([<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>]); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"筛选不满足要求的数组值\"><a class=\"markdownIt-Anchor\" href=\"#筛选不满足要求的数组值\">#</a> 筛选不满足要求的数组值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">pred, array</span>) =&gt;</span> array.filter(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> !pred(...args));</span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 3, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.length &gt; <span class=\"number\">4</span>, [<span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"string\">&#x27;Pear&#x27;</span>, <span class=\"string\">&#x27;Kiwi&#x27;</span>, <span class=\"string\">&#x27;Banana&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;Pear&#x27;, &#x27;Kiwi&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定范围内的n个随机整数数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定范围内的n个随机整数数组\">#</a> 生成指定范围内的 “n” 个随机整数数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomIntArrayInRange = <span class=\"function\">(<span class=\"params\">min, max, n = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(</span><br><span class=\"line\">    &#123; <span class=\"attr\">length</span>: n &#125;,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">randomIntArrayInRange(<span class=\"number\">12</span>, <span class=\"number\">35</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\"><span class=\"comment\">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象数组转换为与指定的key对应的值数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象数组转换为与指定的key对应的值数组\">#</a> 将对象数组转换为与指定的 “key” 对应的值数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pluck = <span class=\"function\">(<span class=\"params\">arr, key</span>) =&gt;</span> arr.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i[key]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> simpsons = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisa&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;homer&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">36</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;marge&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;bart&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">pluck(simpsons, <span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// [8, 36, 34, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象创建为键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象创建为键值对数组\">#</a> 将对象创建为键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectToEntries = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"built_in\">Object</span>.keys(obj).map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class=\"line\">objectToEntries(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [ [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2] ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组转键值对的对象\"><a class=\"markdownIt-Anchor\" href=\"#数组转键值对的对象\">#</a> 数组转键值对的对象</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectFromPairs = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">a, [key, val]</span>) =&gt;</span> ((a[key] = val), a), &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">objectFromPairs([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最小元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最小元素\">#</a> 从提供的数组返回 “n” 个最小元素。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b).slice(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最大元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最大元素\">#</a> 从提供的数组返回 “n” 个最大元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a).slice(<span class=\"number\">0</span>, n);</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并数组并排序\"><a class=\"markdownIt-Anchor\" href=\"#合并数组并排序\">#</a> 合并数组并排序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mergeSortedArrays = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _a = [...a],</span><br><span class=\"line\">    _b = [...b];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: _a.length + _b.length &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_a.length) <span class=\"keyword\">return</span> _b.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_b.length) <span class=\"keyword\">return</span> _a.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> _a[<span class=\"number\">0</span>] &gt; _b[<span class=\"number\">0</span>] ? _b.shift() : _a.shift();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mergeSortedArrays([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"查找数组中指定值的所有索引\"><a class=\"markdownIt-Anchor\" href=\"#查找数组中指定值的所有索引\">#</a> 查找数组中指定值的所有索引</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexOfAll = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">acc, el, i</span>) =&gt;</span> (el === val ? [...acc, i] : acc), []);</span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>); <span class=\"comment\">// [0, 3]</span></span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建等比数组\"><a class=\"markdownIt-Anchor\" href=\"#创建等比数组\">#</a> 创建等比数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> equalRatioArr = <span class=\"function\">(<span class=\"params\">end, start = <span class=\"number\">1</span>, step = <span class=\"number\">2</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.log(end / start) / <span class=\"built_in\">Math</span>.log(step)) + <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;).map(<span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> start * step ** i);</span><br><span class=\"line\"></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>); <span class=\"comment\">// [1, 2, 4, 8, 16, 32, 64, 128, 256]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [3, 6, 12, 24, 48, 96, 192]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>); <span class=\"comment\">// [1, 4, 16, 64, 256]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将数组展平到指定的深度\"><a class=\"markdownIt-Anchor\" href=\"#将数组展平到指定的深度\">#</a> 将数组展平到指定的深度</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, depth = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span></span><br><span class=\"line\">      a.concat(depth &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Array</span>.isArray(v) ? flatten(v, depth - <span class=\"number\">1</span>) : v),</span><br><span class=\"line\">    []</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>], <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">6</span>], <span class=\"number\">7</span>], <span class=\"number\">8</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2, 3, [4, 5], 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"找到满足条件的指定n个值\"><a class=\"markdownIt-Anchor\" href=\"#找到满足条件的指定n个值\">#</a> 找到满足条件的指定 n 个值</h4>\n<h4 id=\"从前往后\"><a class=\"markdownIt-Anchor\" href=\"#从前往后\">#</a> 从前往后</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findFirstN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.push(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从后往前\"><a class=\"markdownIt-Anchor\" href=\"#从后往前\">#</a> 从后往前</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findLastN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.unshift(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [4, 6]</span></span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "ES6",
                "数组"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/06/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%97%B6%E9%97%B40-20/",
            "url": "https://codingfxj.github.io/2021/06/06/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%97%B6%E9%97%B40-20/",
            "title": "JS代码片段之时间0-20",
            "date_published": "2021-06-06T03:57:47.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"js代码片段之时间0-20\"><a class=\"markdownIt-Anchor\" href=\"#js代码片段之时间0-20\">#</a> JS 代码片段之时间 0-20</h3>\n<h4 id=\"1date对象拿到转为hhmmss格式的时间\"><a class=\"markdownIt-Anchor\" href=\"#1date对象拿到转为hhmmss格式的时间\">#</a> 1.Date 对象拿到转为 HH:MM:SS` 格式的时间</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getFromDate = <span class=\"function\"><span class=\"params\">date</span> =&gt;</span> date.toTimeString().slice(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">getFromDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()); <span class=\"comment\">// &#x27;08:38:00&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2推算n天前的日期\"><a class=\"markdownIt-Anchor\" href=\"#2推算n天前的日期\">#</a> 2. 推算 n 天前的日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> daysAgo = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  d.setDate(d.getDate() - <span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daysAgo(<span class=\"number\">20</span>); <span class=\"comment\">// 2020-09-16 (if current date is 2020-10-06)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>判断 dateA 是不是在 dateB 后</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isAfterDate = <span class=\"function\">(<span class=\"params\">dateA, dateB</span>) =&gt;</span> dateA &gt; dateB;</span><br><span class=\"line\">isAfterDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"推算n天后的日期\"><a class=\"markdownIt-Anchor\" href=\"#推算n天后的日期\">#</a> 推算 n 天后的日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> daysFromNow = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  d.setDate(d.getDate() + <span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daysFromNow(<span class=\"number\">5</span>); <span class=\"comment\">// 2020-10-13 (if current date is 2020-10-08)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3按天数推算日期\"><a class=\"markdownIt-Anchor\" href=\"#3按天数推算日期\">#</a> 3. 按天数推算日期</h4>\n<p>从给定日期计算，距离当前日期 <code>n</code>  天的日期，返回其字符串表示形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addDaysToDate = <span class=\"function\">(<span class=\"params\">date, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">          d.setDate(d.getDate() + n);</span><br><span class=\"line\">      </span><br><span class=\"line\">        \t<span class=\"built_in\">console</span>.log(d);<span class=\"comment\">//Wed Nov 04 2020 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(d.toISOString());<span class=\"comment\">//2020-11-04T00:00:00.000Z</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>));<span class=\"comment\">//[&quot;2020-11-04&quot;, &quot;00:00:00.000Z&quot;]</span></span><br><span class=\"line\">      </span><br><span class=\"line\">          <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(addDaysToDate(<span class=\"string\">&#x27;2020-10-15&#x27;</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// &#x27;2020-10-25&#x27;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(addDaysToDate(<span class=\"string\">&#x27;2020-10-15&#x27;</span>, -<span class=\"number\">10</span>)); <span class=\"comment\">// &#x27;2020-10-05&#x27;</span></span><br><span class=\"line\">       </span><br></pre></td></tr></table></figure>\n<h4 id=\"4按分钟推算时间\"><a class=\"markdownIt-Anchor\" href=\"#4按分钟推算时间\">#</a> 4. 按分钟推算时间</h4>\n<p>从给定日期计算  <code>n</code>  分钟的日期，返回其字符串表示形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addMinutesToDate = <span class=\"function\">(<span class=\"params\">date, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">              <span class=\"keyword\">var</span> dd = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.getTime() + n * <span class=\"number\">60000</span>);</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(dd);<span class=\"comment\">//Mon Oct 19 2020 01:10:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(dd.toISOString());<span class=\"comment\">//2020-10-18T17:10:00.000Z</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> dd.toISOString().split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(addMinutesToDate(<span class=\"string\">&#x27;2020-10-19 1:00:00&#x27;</span>, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"5计算加上七个工作日后的日期\"><a class=\"markdownIt-Anchor\" href=\"#5计算加上七个工作日后的日期\">#</a> 5. 计算加上七个工作日后的日期</h4>\n<p>Array.from () 方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addWeekDays = <span class=\"function\">(<span class=\"params\">startDate, count</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: count &#125;).reduce(<span class=\"function\"><span class=\"params\">date</span> =&gt;</span> &#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.setDate(date.getDate() + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (date.getDay() % <span class=\"number\">6</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">      date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.setDate(date.getDate() + (date.getDay() / <span class=\"number\">6</span> + <span class=\"number\">1</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">  &#125;, startDate);</span><br></pre></td></tr></table></figure>\n<h4 id=\"6计算两个日期之间的工作日\"><a class=\"markdownIt-Anchor\" href=\"#6计算两个日期之间的工作日\">#</a> 6. 计算两个日期之间的工作日。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> countWeekDaysBetween = <span class=\"function\">(<span class=\"params\">startDate, endDate</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: (endDate - startDate) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span> * <span class=\"number\">24</span>) &#125;).reduce(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (startDate.getDay() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>) count++;</span><br><span class=\"line\">      startDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(startDate.setDate(startDate.getDate() + <span class=\"number\">1</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">countWeekDaysBetween(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 05, 2020&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 06, 2020&#x27;</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\">countWeekDaysBetween(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 05, 2020&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;Oct 14, 2020&#x27;</span>)); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"7返回当前星期几\"><a class=\"markdownIt-Anchor\" href=\"#7返回当前星期几\">#</a> 7. 返回当前星期几</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currentURL = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(currentURL());;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> dayName = <span class=\"function\">(<span class=\"params\">date, locale</span>) =&gt;</span></span><br><span class=\"line\">           date.toLocaleDateString(locale, &#123;</span><br><span class=\"line\">               <span class=\"attr\">weekday</span>: <span class=\"string\">&#x27;long&#x27;</span></span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(dayName(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));; <span class=\"comment\">// &#x27;Saturday&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"8求某一天在一年中是第几天\"><a class=\"markdownIt-Anchor\" href=\"#8求某一天在一年中是第几天\">#</a> 8. 求某一天在一年中是第几天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dayOfYear = <span class=\"function\"><span class=\"params\">date</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor((date - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date.getFullYear(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>);</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(dayOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));</span><br></pre></td></tr></table></figure>\n<h4 id=\"9计算两个日期相隔多少天\"><a class=\"markdownIt-Anchor\" href=\"#9计算两个日期相隔多少天\">#</a> 9. 计算两个日期相隔多少天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getDaysDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span> * <span class=\"number\">24</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDaysDiffBetweenDates(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-13&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-22&#x27;</span>)); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"10计算两个日期相隔多少月\"><a class=\"markdownIt-Anchor\" href=\"#10计算两个日期相隔多少月\">#</a> 10. 计算两个日期相隔多少月</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getMonthsDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.max(</span><br><span class=\"line\">    (dateFinal.getFullYear() - dateInitial.getFullYear()) * <span class=\"number\">12</span> +</span><br><span class=\"line\">      dateFinal.getMonth() -</span><br><span class=\"line\">      dateInitial.getMonth(),</span><br><span class=\"line\">    <span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMonthsDiffBetweenDates(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2017-12-13&#x27;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2018-04-29&#x27;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"11计算两个时间相隔多少小时\"><a class=\"markdownIt-Anchor\" href=\"#11计算两个时间相隔多少小时\">#</a> 11. 计算两个时间相隔多少小时</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getHoursDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">3600</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHoursDiffBetweenDates(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 10:25:00&#x27;</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-25 10:25:00&#x27;</span>)</span><br><span class=\"line\">); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"12计算相隔多少分钟\"><a class=\"markdownIt-Anchor\" href=\"#12计算相隔多少分钟\">#</a> 12. 计算相隔多少分钟</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getMinutesDiffBetweenDates = <span class=\"function\">(<span class=\"params\">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class=\"line\">  (dateFinal - dateInitial) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMinutesDiffBetweenDates(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 01:00:15&#x27;</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2021-04-24 02:00:15&#x27;</span>)</span><br><span class=\"line\">); <span class=\"comment\">// 60</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"13判断是否为闰年\"><a class=\"markdownIt-Anchor\" href=\"#13判断是否为闰年\">#</a> 13. 判断是否为闰年</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isLeapYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, <span class=\"number\">1</span>, <span class=\"number\">29</span>).getMonth() === <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isLeapYear(<span class=\"number\">2019</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isLeapYear(<span class=\"number\">2020</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"14判断是否为同一天\"><a class=\"markdownIt-Anchor\" href=\"#14判断是否为同一天\">#</a> 14. 判断是否为同一天</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSameDate = <span class=\"function\">(<span class=\"params\">dateA, dateB</span>) =&gt;</span></span><br><span class=\"line\">  dateA.toISOString() === dateB.toISOString();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isSameDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"15判断今天是否为工作日\"><a class=\"markdownIt-Anchor\" href=\"#15判断今天是否为工作日\">#</a> 15. 判断今天是否为工作日</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDay() 方法可返回一周（<span class=\"number\">0</span>~<span class=\"number\">6</span>）的某一天的数字。</span><br><span class=\"line\"></span><br><span class=\"line\">注意： 星期天为 <span class=\"number\">0</span>, 星期一为 <span class=\"number\">1</span>, 以此类推。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isWeekday = <span class=\"function\">(<span class=\"params\">d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> d.getDay() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">isWeekday(); </span><br></pre></td></tr></table></figure>\n<h4 id=\"16判断今天是否为周末\"><a class=\"markdownIt-Anchor\" href=\"#16判断今天是否为周末\">#</a> 16. 判断今天是否为周末</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isWeekend = <span class=\"function\">(<span class=\"params\">d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> d.getDay() % <span class=\"number\">6</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">isWeekend();</span><br></pre></td></tr></table></figure>\n<h4 id=\"17返回最小日期\"><a class=\"markdownIt-Anchor\" href=\"#17返回最小日期\">#</a> 17. 返回最小日期</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minDate = <span class=\"function\">(<span class=\"params\">...dates</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Math</span>.min(...dates));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dates = [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2018</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\">minDate(...dates); <span class=\"comment\">// 2016-01-08T22:00:00.000Z</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"18返回提供的日期所属的季度和年份\"><a class=\"markdownIt-Anchor\" href=\"#18返回提供的日期所属的季度和年份\">#</a> 18. 返回提供的日期所属的季度和年份</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"keyword\">const</span> quarterOfYear = <span class=\"function\">(<span class=\"params\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span>) =&gt;</span> [  <span class=\"built_in\">Math</span>.ceil((date.getMonth() + <span class=\"number\">1</span>) / <span class=\"number\">3</span>),  date.getFullYear()];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quarterOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;07/10/2018&#x27;</span>)); <span class=\"comment\">// [ 3, 2018 ]</span></span><br><span class=\"line\">quarterOfYear(); <span class=\"comment\">// [ 4, 2020 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"19返回明天日期的字符串\"><a class=\"markdownIt-Anchor\" href=\"#19返回明天日期的字符串\">#</a> 19. 返回明天日期的字符串。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tomorrow = <span class=\"function\">() =&gt;</span> &#123;  <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  d.setDate(d.getDate() + <span class=\"number\">1</span>);  <span class=\"keyword\">return</span> d.toISOString().split(<span class=\"string\">&#x27;T&#x27;</span>)[<span class=\"number\">0</span>];&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tomorrow(); </span><br></pre></td></tr></table></figure>\n<h4 id=\"20检查是否可以创建有效的日期对象\"><a class=\"markdownIt-Anchor\" href=\"#20检查是否可以创建有效的日期对象\">#</a> 20. 检查是否可以创建有效的日期对象。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDateValid = <span class=\"function\">(<span class=\"params\">...val</span>) =&gt;</span> !<span class=\"built_in\">Number</span>.isNaN(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(...val).valueOf());</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//valueOf()函数返回指定对象的原始值。</span></span><br><span class=\"line\"><span class=\"comment\">//date.valueOf()返回date时间距1970年1月1日午夜的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">//isNaN() 函数用于检查其参数是否是非数字值。</span></span><br><span class=\"line\"></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;December 17, 1995 03:24:00&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;1995-12-17T03:24:00&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;1995-12-17 T03:24:00&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(<span class=\"string\">&#x27;johnblac&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(<span class=\"number\">1995</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">isDateValid(<span class=\"number\">1995</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"string\">&#x27;lanen&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">isDateValid(&#123;&#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "ES6",
                "时间"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/",
            "url": "https://codingfxj.github.io/2021/06/04/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/",
            "title": "数组扁平化方案",
            "date_published": "2021-06-04T05:36:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"扁平化\"><a class=\"markdownIt-Anchor\" href=\"#扁平化\">#</a> 扁平化</h3>\n<h4 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr3 = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>]</span><br><span class=\"line\">], <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"comment\">//reduce递归</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flatten = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre.concat(<span class=\"built_in\">Array</span>.isArray(cur) ? flatten(cur) : cur)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;flatten(arr3): &#x27;</span>, flatten(arr3));</span><br><span class=\"line\"><span class=\"comment\">//[1, 2, 4, 5, 6, 8, 7, 1, 2, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(arr[i]))&#123;</span><br><span class=\"line\">            fn(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn[i]</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三\"><a class=\"markdownIt-Anchor\" href=\"#方法三\">#</a> 方法三</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten1</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.toString().split(<span class=\"string\">&#x27;,&#x27;</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(item);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四\"><a class=\"markdownIt-Anchor\" href=\"#方法四\">#</a> 方法四</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.join(<span class=\"string\">&#x27;,&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(item);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五\"><a class=\"markdownIt-Anchor\" href=\"#方法五\">#</a> 方法五</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten2</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">            arr = [].concat(...arr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法六\"><a class=\"markdownIt-Anchor\" href=\"#方法六\">#</a> 方法六</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.flat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> res3 = <span class=\"built_in\">JSON</span>.stringify(arr).replace(<span class=\"regexp\">/\\[|\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>)<span class=\"comment\">//会变字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">&#x27;[&#x27;</span>+<span class=\"built_in\">JSON</span>.stringify(arr).replace(<span class=\"regexp\">/\\[|\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>)+<span class=\"string\">&#x27;]&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目一\"><a class=\"markdownIt-Anchor\" href=\"#题目一\">#</a> 题目一</h3>\n<p><strong>将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组</strong></p>\n<blockquote>\n<p>arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10]</p>\n</blockquote>\n<h4 id=\"方法一-2\"><a class=\"markdownIt-Anchor\" href=\"#方法一-2\">#</a> 方法一</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from(new Set(arr.flat(Infinity))).sort((a,b)=&gt;&#123; return a-b&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-2\"><a class=\"markdownIt-Anchor\" href=\"#方法二-2\">#</a> 方法二</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.toString().split(&quot;,&quot;).sort((a,b)=&gt;&#123; return a-b&#125;).map(Number)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-2\"><a class=\"markdownIt-Anchor\" href=\"#方法三-2\">#</a> 方法三</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">           [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">           [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], <span class=\"number\">111</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]]], <span class=\"number\">10</span></span><br><span class=\"line\">       ];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">               arr = [].concat(...arr);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(flatten(arr))).sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四-2\"><a class=\"markdownIt-Anchor\" href=\"#方法四-2\">#</a> 方法四</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].concat(...this.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(item) ? item.flat() : [item])));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...new <span class=\"built_in\">Set</span>(<span class=\"built_in\">this</span>)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortrule = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat().unique().sort(sortrule)); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五-2\"><a class=\"markdownIt-Anchor\" href=\"#方法五-2\">#</a> 方法五</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var old_arr=[ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">// 数组拍平</span><br><span class=\"line\">var level_arr=old_arr.flat(4);</span><br><span class=\"line\"></span><br><span class=\"line\">//数组去重</span><br><span class=\"line\">var Distinct=Array.from(new Set(level_arr));</span><br><span class=\"line\"></span><br><span class=\"line\">// 排序</span><br><span class=\"line\">var sort=  Distinct.sort((a, b) =&gt;a - b)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;new arr&quot;,sort)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "数组",
                "扁平化"
            ]
        }
    ]
}