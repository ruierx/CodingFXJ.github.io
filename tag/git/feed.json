{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"git\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/04/27/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://codingfxj.github.io/2021/04/27/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "Git学习笔记",
            "date_published": "2021-04-27T15:49:38.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"git-学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#git-学习笔记\">#</a> Git 学习笔记</h3>\n<p>Git 是流行的版本控制，方便查看更改历史记录，备份以便恢复以前的版本。</p>\n<h4 id=\"四个区域之间的转换关系\"><a class=\"markdownIt-Anchor\" href=\"#四个区域之间的转换关系\">#</a> 四个区域之间的转换关系</h4>\n<p><img src=\"/images/gityuanli.jpg\" alt=\"\"></p>\n<blockquote>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>工作流程：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到 git 仓库</p>\n</blockquote>\n<p><img src=\"/images/zhuangtai.jpg\" alt=\"\"></p>\n<h4 id=\"git-bash常用的linux命令\"><a class=\"markdownIt-Anchor\" href=\"#git-bash常用的linux命令\">#</a> Git bash 常用的 Linux 命令</h4>\n<p>1）cd : 改变目录。</p>\n<p>2）cd . . 回退到上一个目录，直接 cd 进入默认目录</p>\n<p>3）pwd : 显示当前所在的目录路径。</p>\n<p>4）ls (ll):  都是列出当前目录中的所有文件，只不过 ll (两个 ll) 列出的内容更为详细。</p>\n<p>5）touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。</p>\n<p>6）m:  删除一个文件，rm index.js 就会把 index.js 文件删除。</p>\n<p>7）mkdir:  新建一个目录，就是新建一个文件夹。</p>\n<p>8）rm -r :  删除一个文件夹，rm -r src 删除 src 目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure>\n<p>9）mv 移动文件，mv index.html src index.html 是我们要移动的文件，src 是目标文件夹，当然，这样写，必须保证文件和目标文件夹在同一目录下。</p>\n<ol start=\"10\">\n<li>reset 重新初始化终端 / 清屏。</li>\n</ol>\n<p>11）clear 清屏。</p>\n<p>12）history 查看命令历史。</p>\n<p>13）help 帮助。</p>\n<p>14）exit 退出。</p>\n<p>15）# 表示注释</p>\n<h4 id=\"git配置\"><a class=\"markdownIt-Anchor\" href=\"#git配置\">#</a> Git 配置</h4>\n<p><strong>查看配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看系统config</span></span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\">　　</span><br><span class=\"line\"><span class=\"comment\">#查看当前用户（global）配置</span></span><br><span class=\"line\">git config --global  --list</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Git\\etc\\gitconfig  ：Git 安装目录下的 gitconfig   --system 系统级</p>\n<p>C:\\Users\\Administrator\\ .gitconfig   只适用于当前登录用户的配置  --global 全局</p>\n</blockquote>\n<p><strong>配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;CodingFXJ&quot;</span>  <span class=\"comment\">#名称</span></span><br><span class=\"line\">git config --global user.email 3010099292@qq.com   <span class=\"comment\">#邮箱</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"git项目搭建\"><a class=\"markdownIt-Anchor\" href=\"#git项目搭建\">#</a> Git 项目搭建</h4>\n<p><strong>本地仓库搭建</strong></p>\n<p>1、创建全新的仓库，需要用 GIT 管理的项目的根目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<p>2、执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面。</p>\n<p><strong>克隆远程仓库</strong></p>\n<p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]  <span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件操作\"><a class=\"markdownIt-Anchor\" href=\"#文件操作\">#</a> 文件操作</h4>\n<p><strong>文件四种状态</strong></p>\n<blockquote>\n<ul>\n<li>Untracked: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged.</li>\n<li>Unmodify: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified. 如果使用 git rm 移出版本库，则成为 Untracked 文件</li>\n<li>Modified: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li>\n<li>Staged: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li>\n</ul>\n</blockquote>\n<p><strong>查看文件状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看指定文件状态</span></span><br><span class=\"line\">git status [filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看所有文件状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git add .                  添加所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"comment\"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>\n<p><strong>忽略文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#为注释</span></span><br><span class=\"line\">*.txt        <span class=\"comment\">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class=\"line\">!lib.txt     <span class=\"comment\">#但lib.txt除外</span></span><br><span class=\"line\">/temp        <span class=\"comment\">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class=\"line\">build/       <span class=\"comment\">#忽略build/目录下的所有文件</span></span><br><span class=\"line\">doc/*.txt    <span class=\"comment\">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"idea中集成git\"><a class=\"markdownIt-Anchor\" href=\"#idea中集成git\">#</a> IDEA 中集成 Git</h4>\n<ol>\n<li>使用 github、gitee，设置本机绑定 SSH 公钥，实现免密码登录</li>\n</ol>\n<p>克隆项目到本地。</p>\n<ol start=\"2\">\n<li>\n<p>使用 IDEA 绑定 git，把远程 git 文件目录复制到项目中</p>\n</li>\n<li>\n<p>编写文件，使用 IDEA 操作 git</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>\n<p>添加到暂存区</p>\n</li>\n<li>\n<p>commit 提交</p>\n</li>\n<li>\n<p>push 到远程仓库</p>\n</li>\n</ol>\n</blockquote>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/04/15/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "https://codingfxj.github.io/2021/04/15/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "Git常用命令",
            "date_published": "2021-04-15T02:46:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>Git 是一个开源的分布式版本控制系统。</p>\n<p>可以有效、高速地处理从很小到非常大的项目版本管理。</p>\n<h4 id=\"1-区域\"><a class=\"markdownIt-Anchor\" href=\"#1-区域\">#</a> 1. 区域</h4>\n<p>工作区：本地代码<br>\n暂存区：暂时先放到这儿<br>\n版本库：提交后的存储</p>\n<h4 id=\"2git对象\"><a class=\"markdownIt-Anchor\" href=\"#2git对象\">#</a> 2.Git 对象</h4>\n<p>Git 有<strong>四种基本的对象类型</strong>，包括：</p>\n<p><strong>blobs :</strong></p>\n<p>git add 命令将文件或者目录加入到暂存区时产生。</p>\n<p>每个 blob 代表一个版本文件，blob 只包含文件的数据，</p>\n<p>而忽略文件的其他元数据，如：名字、路径、格式等。</p>\n<p><strong>trees :</strong></p>\n<p>每个 tree 代表了一个目录的信息，包含了此目录下的 blobs，子目录（对应于子 trees）, 文件名、路径等元数据。</p>\n<p><strong>commits :</strong></p>\n<p>每个 commit 记录了提交一个更新的所有元数据，</p>\n<p>如：指向的 tree、父 commit、作者、提交者、提交日期、提交日志等。</p>\n<p>每次提交都指向一个 tree 对象，记录了当时提交的目录信息，一个 commit 可以有多个（至少一个）父 commit。</p>\n<p><strong>tags :</strong></p>\n<p>tag 用于给某个上述类型的对象指配一个便于开发者记忆的名字，通常用于某次 commit。</p>\n<h4 id=\"3查看更新git版本\"><a class=\"markdownIt-Anchor\" href=\"#3查看更新git版本\">#</a> 3. 查看 / 更新 git 版本</h4>\n<figure class=\"highlight plaintext\"><figcaption><span>--version</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br><span class=\"line\">git update-git-for-windows</span><br></pre></td></tr></table></figure>\n<h4 id=\"4主要命令\"><a class=\"markdownIt-Anchor\" href=\"#4主要命令\">#</a> 4. 主要命令</h4>\n<figure class=\"highlight plaintext\"><figcaption><span>add # 将工作区的修改提交到暂存区</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit # 将暂存区的修改提交到当前分支</span><br><span class=\"line\">git reset # 回退到某一个版本</span><br><span class=\"line\">git stash # 保存某次修改</span><br><span class=\"line\">git pull # 从远程更新代码</span><br><span class=\"line\">git push # 将本地代码更新到远程分支上</span><br><span class=\"line\">git reflog # 查看历史命令</span><br><span class=\"line\">git status # 查看当前仓库的状态</span><br><span class=\"line\">git diff # 查看修改</span><br><span class=\"line\">git log # 查看提交历史</span><br><span class=\"line\">git revert # 回退某个修改</span><br></pre></td></tr></table></figure>\n<h4 id=\"5配置git\"><a class=\"markdownIt-Anchor\" href=\"#5配置git\">#</a> 5. 配置 git</h4>\n<figure class=\"highlight plaintext\"><figcaption><span>config --global user.name</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email</span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n<h4 id=\"6高级命令增删改查\"><a class=\"markdownIt-Anchor\" href=\"#6高级命令增删改查\">#</a> 6. 高级命令（增删改查）</h4>\n<figure class=\"highlight plaintext\"><figcaption><span>init                 初始化仓库</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status               查看文件的状态</span><br><span class=\"line\">git diff                 查卡那些修改还没有暂存</span><br><span class=\"line\">git diff --staged        查看那些修改以及暂存的还没有被提交</span><br><span class=\"line\"></span><br><span class=\"line\">git log --oneline        查看提交的历史记录</span><br><span class=\"line\">git add ./               将修改添加到暂存区</span><br><span class=\"line\">git rm 文件               删除工作目录中对应的文件 再将修改添加到暂存区</span><br><span class=\"line\">git mv 源文件名 新文件名    将工作目录中的文件进行重命名</span><br><span class=\"line\"></span><br><span class=\"line\">git commit               提交</span><br><span class=\"line\">git commit -a            被跟踪过的文件才可以用的</span><br><span class=\"line\">git commit -a -m &quot;注释&quot;   将暂存区提交到版本库</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master 将文件给推到服务器上 </span><br><span class=\"line\">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">git remote show origin 显示远程库origin里的资源</span><br><span class=\"line\">git remote show 查看远程库</span><br></pre></td></tr></table></figure>\n<h4 id=\"7高级命令-分支\"><a class=\"markdownIt-Anchor\" href=\"#7高级命令-分支\">#</a> 7. 高级命令 （分支）</h4>\n<figure class=\"highlight plaintext\"><figcaption><span>reflog          查看操作内容日志</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate --graph --all 查看整个项目的分支图</span><br><span class=\"line\">git branch          显示分支列表</span><br><span class=\"line\">git branch -v       查看分支指向的最新提交</span><br><span class=\"line\"></span><br><span class=\"line\">git branch name     创建分支</span><br><span class=\"line\">git branch -a 查看所有的分支</span><br><span class=\"line\">git branch -r 查看远程所有分支</span><br><span class=\"line\">git branch name commithash 在指定的提交对象上创建新的分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b name 切换分支并创建新分支</span><br><span class=\"line\">git checkout name   切换分支（每一次切换时要提交上一次的分支）</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d name  删除空的分支或者已经被合并的分支</span><br><span class=\"line\">git branch -D name  强行删除分支</span><br><span class=\"line\">git merge name      合并分支（先切换到主分支）</span><br></pre></td></tr></table></figure>\n<h4 id=\"8数据恢复\"><a class=\"markdownIt-Anchor\" href=\"#8数据恢复\">#</a> 8. 数据恢复</h4>\n<p>工作区<br>\n撤回自己再工作目录中的修改</p>\n<figure class=\"highlight plaintext\"><figcaption><span>checkout --filename</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --filename</span><br></pre></td></tr></table></figure>\n<p>暂存区<br>\n撤回自己的暂存区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD filename</span><br></pre></td></tr></table></figure>\n<h4 id=\"9操作文件\"><a class=\"markdownIt-Anchor\" href=\"#9操作文件\">#</a> 9. 操作文件</h4>\n<p>echo “文件内容” &gt; one.txt 创建文件<br>\n查看暂存区</p>\n<figure class=\"highlight plaintext\"><figcaption><span>ls-files -s</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files -s</span><br></pre></td></tr></table></figure>\n<h4 id=\"10git的功能特性\"><a class=\"markdownIt-Anchor\" href=\"#10git的功能特性\">#</a> 10.Git 的功能特性：</h4>\n<h5 id=\"从一般开发者的角度来看git有以下功能\"><a class=\"markdownIt-Anchor\" href=\"#从一般开发者的角度来看git有以下功能\">#</a> 从一般开发者的角度来看，git 有以下功能：</h5>\n<p>1、从服务器上克隆完整的 Git 仓库（包括代码和版本信息）到单机上。</p>\n<p>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。3、在单机上自己创建的分支上提交代码。</p>\n<p>4、在单机上合并分支。</p>\n<p>5、把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。</p>\n<p>6、生成补丁（patch），把补丁发送给主开发者。</p>\n<p>7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。<br>\n如果主开发者可以自己解决，或者没有冲突，就通过。</p>\n<p>8、一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</p>\n<h5 id=\"从主-开发者的角度看git有以下功能\"><a class=\"markdownIt-Anchor\" href=\"#从主-开发者的角度看git有以下功能\">#</a> 从主 开发者的角度看，git 有以下功能：</h5>\n<p>1、查看邮件或者通过其它方式查看一般开发者的提交状态。</p>\n<p>2、打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。</p>\n<p>3、向公共服务器提交结果，然后通知所有开发人员。</p>\n<p><strong>优点</strong>：适合分布式开发，强调个体。公共服务器压力和数据量都不会太大。速度快、灵活。</p>\n<p><strong>缺点</strong>：中文资料少。学习周期相对而言比较长。不符合常规思维。代码保密性差。</p>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}