{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"数组\" tag",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/06/22/%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/",
            "url": "https://codingfxj.github.io/2021/06/22/%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/",
            "title": "数组常见应用",
            "date_published": "2021-06-22T11:38:57.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"类型判断四种方法\"><a class=\"markdownIt-Anchor\" href=\"#类型判断四种方法\">#</a> 类型判断四种方法</h3>\n<p>8 种数据类型： <code>Number、String、Boolean、Null、undefined、Object、Symbol、bigInt</code></p>\n<p>Object 类型包含：Date、function、Array、正则 reg、</p>\n<blockquote>\n<p>方法一：<strong>typeof</strong> 适合判断基本数据类型</p>\n<p>arr, json, null, date, reg, error 全部被检测为 object 类型</p>\n</blockquote>\n<blockquote>\n<p>方法二：<strong>instanceof</strong> 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型</p>\n</blockquote>\n<blockquote>\n<p>方法三：<strong>constructor</strong>  对 null 和 undefined 无效对象不管用，没有 constructor ，</p>\n<p>函数的 constructor 不稳定，容易被修改</p>\n</blockquote>\n<blockquote>\n<p>方法四：<strong>toString()</strong> ，<strong>最准确</strong>，Object 的原型方法，</p>\n<p>使用方式  <code>Object.prototype.toString.call(xxx)</code>   返回 <code>[object xxx]</code></p>\n</blockquote>\n<h3 id=\"判断是否为数组\"><a class=\"markdownIt-Anchor\" href=\"#判断是否为数组\">#</a> 判断是否为数组</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"number\">2.</span> arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"number\">3.</span> arr.constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arr) === <span class=\"string\">&#x27;[object Array]&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5.</span> <span class=\"built_in\">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组-对象-伪数组的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组-对象-伪数组的区别\">#</a> 数组、对象、伪数组的区别</h3>\n<p><strong>创建方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">//字面量赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 构造函数创建</span></span><br><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>关系</strong></p>\n<blockquote>\n<p>数组属于对象，所有 JavaScript 的内置构造函数都是继承自  <code>Object.prototype</code> ，new Array () 或 [] 创建出来的数组对象，都会拥有  <code>Object.prototype</code>  的属性值。</p>\n</blockquote>\n<p><strong>区别</strong></p>\n<blockquote>\n<p>区别 1：对象没有数组 <code>Array.prototype</code>  的属性值</p>\n<p>区别 2：对象没有数组的 length 属性</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;a&#x27;</span>; <span class=\"comment\">//&#123;&quot;2&quot;:&quot;a&quot;&#125;</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//[null,null,&quot;a&quot;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"伪数组转数组\"><a class=\"markdownIt-Anchor\" href=\"#伪数组转数组\">#</a> 伪数组转数组</h3>\n<blockquote>\n<p>伪数组：拥有 length 属性和索引，索引为非负整数，伪数组是一个 Object</p>\n<p>常见伪数组： <code>arguments</code> ， <code>dom对象</code> ， <code>dom的childNodes</code> ， <code>jquery</code>  对象，上传文件时选择的 file 对象。</p>\n<p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多算法。</p>\n<p>例如： <code>var arr = Array.prototype.slice.call(arguments)</code></p>\n</blockquote>\n<p>判断是否为伪数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArrayLike</span>(<span class=\"params\">o</span>) </span>&#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o &amp;&amp;                                <span class=\"comment\">// o is not null, undefined, etc.</span></span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> o === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;            <span class=\"comment\">// o is an object</span></span><br><span class=\"line\">            <span class=\"built_in\">isFinite</span>(o.length) &amp;&amp;               <span class=\"comment\">// o.length is a finite number</span></span><br><span class=\"line\">            o.length &gt;= <span class=\"number\">0</span> &amp;&amp;                    <span class=\"comment\">// o.length is non-negative</span></span><br><span class=\"line\">            o.length===<span class=\"built_in\">Math</span>.floor(o.length) &amp;&amp;  <span class=\"comment\">// o.length is an integer</span></span><br><span class=\"line\">            o.length &lt; <span class=\"number\">4294967296</span>)              <span class=\"comment\">// o.length &lt; 2^32</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                        <span class=\"comment\">// Then o is array-like</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                       <span class=\"comment\">// Otherwise it is not</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray) === <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(arr) === <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一（适用于ie8+）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"><span class=\"comment\">//或Array.prototype.slice().call(arguments)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">likeArray</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; likeArray.length; i++)&#123;</span><br><span class=\"line\">\t\tarr[arr.length] = likeArray[i];</span><br><span class=\"line\">        <span class=\"comment\">// arr.push(likeArray[i])</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法三</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组拼接\"><a class=\"markdownIt-Anchor\" href=\"#数组拼接\">#</a> 数组拼接</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"comment\">//方式一:适用小数组，对大型的数组,或需要多次重复处理时, 内存被限制</span></span><br><span class=\"line\">arr1.concat(arr2) </span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2) <span class=\"comment\">//arr1.push.apply(arr1,arr2)</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法三 : unshift插入到前面</span></span><br><span class=\"line\"> <span class=\"built_in\">Array</span>.prototype.unshift.apply(arr1, arr2)  <span class=\"comment\">//arr1.unshift.apply(arr1,arr2)</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法四</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">//方法五</span></span><br><span class=\"line\">[...arr1,...arr2]</span><br><span class=\"line\"><span class=\"comment\">//方法六 循环插入:很土且难以维护</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">    arr1.push( arr2[i] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法六 reduce</span></span><br><span class=\"line\">arr1 = arr2.reduce( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pre,val</span>)</span>&#123;</span><br><span class=\"line\">    pre.push( val );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;, arr1 );</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "数组"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "url": "https://codingfxj.github.io/2021/06/09/JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B9%8B%E6%95%B0%E7%BB%8420-50/",
            "title": "JS代码片段之数组20-50",
            "date_published": "2021-06-09T09:02:30.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"js代码片段之数组20-60\"><a class=\"markdownIt-Anchor\" href=\"#js代码片段之数组20-60\">#</a> JS 代码片段之数组 20-60</h3>\n<h4 id=\"检查数组是否满足条件\"><a class=\"markdownIt-Anchor\" href=\"#检查数组是否满足条件\">#</a> 检查数组是否满足条件</h4>\n<blockquote>\n<p>every () 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p>\n<p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>\n如果所有元素都满足条件，则返回 true。</p>\n<p><strong>every () 不会改变原始数组</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAdult</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ages.every(checkAdult);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueElements = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\">uniqueElements([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组合并兼去重\"><a class=\"markdownIt-Anchor\" href=\"#数组合并兼去重\">#</a> 数组合并兼去重</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> union = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...a, ...b]));</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查是否是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#检查是否是为等值的数组\">#</a> 检查是否是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqual = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val === arr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// false</span></span><br><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入之后是为等值的数组\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入之后是为等值的数组\">#</a> 判断数组（四舍五入）之后是为等值的数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqualBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;  <span class=\"keyword\">const</span> eql = fn(arr[<span class=\"number\">0</span>]);  <span class=\"keyword\">return</span> arr.every(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> fn(val) === eql);&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">1.3</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allEqualBy([<span class=\"number\">1.1</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.6</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组的值是否重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组的值是否重复\">#</a> 判断数组的值是否重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUnique = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUnique([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组四舍五入后是否有值重复\"><a class=\"markdownIt-Anchor\" href=\"#判断数组四舍五入后是否有值重复\">#</a> 判断数组（四舍五入）后是否有值重复</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allUniqueBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> arr.length === <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr.map(fn)).size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.4</span>, <span class=\"number\">2.9</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// true</span></span><br><span class=\"line\">allUniqueBy([<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">2.4</span>], <span class=\"built_in\">Math</span>.round); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回原始数组元素调用函数处理后的值  </span></span><br><span class=\"line\">&#125;, thisArg)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>callback 生成新数组元素的函数，使用三个参数：<br>\ncurrentValue  数组中正在处理的当前元素。<br>\nindex 可选  \t数组中正在处理的当前元素的索引。<br>\narray 可选  \tmap 方法被调用的数组。<br>\nthisArg 可选 \t执行 callback 函数时使用的 this 值。<br>\n<strong>不会对空数组进行检测， map () 不会改变原始数组。</strong></p>\n</blockquote>\n<h4 id=\"判断数组是否满足要求\"><a class=\"markdownIt-Anchor\" href=\"#判断数组是否满足要求\">#</a> 判断数组是否满足要求</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> someany = <span class=\"function\">(<span class=\"params\">arr, fn = <span class=\"built_in\">Boolean</span></span>) =&gt;</span> arr.some(fn);<span class=\"comment\">//是否有一个满足要求</span></span><br><span class=\"line\"><span class=\"comment\">// const any = (arr, fn = Boolean) =&gt; arr.every(fn);//每一个是否满足要求</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = someany([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>], <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &gt;= <span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = someany([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分割数组\"><a class=\"markdownIt-Anchor\" href=\"#分割数组\">#</a> 分割数组</h4>\n<blockquote>\n<p><code>arrayObject.slice(start,end)</code> ，slice () 方法可从已有的数组中返回选定的元素，</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> aperture = <span class=\"function\">(<span class=\"params\">n, arr</span>) =&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//n表示分割成多长的数组</span></span><br><span class=\"line\">     n &gt; arr.length ? [] :arr.slice(n - <span class=\"number\">1</span>).map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> arr.slice(i, i + n));<span class=\"comment\">//v是当前值，i当前索引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"> aperture(<span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [[1, 2], [2, 3], [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(3, [1, 2, 3, 4]); // [[1, 2, 3], [2, 3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\">// aperture(5, [1, 2, 3, 4]); // []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"转为数组\"><a class=\"markdownIt-Anchor\" href=\"#转为数组\">#</a> 转为数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> castArray = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(val) ? val : [val]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"从数组中删除假值\"><a class=\"markdownIt-Anchor\" href=\"#从数组中删除假值\">#</a> 从数组中删除假值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(item);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compact = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> * <span class=\"number\">23</span>, <span class=\"literal\">NaN</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">34</span>]); </span><br><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3, &#x27;a&#x27;, &#x27;s&#x27;, 34 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"求一个值在数组出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#求一个值在数组出现的次数\">#</a> 求一个值在数组出现的次数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCount = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span> arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v === val ? a + <span class=\"number\">1</span> : a), <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中最频繁的元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中最频繁的元素\">#</a> 返回数组中最频繁的元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mostFrequent = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.entries(</span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      a[v] = a[v] ? a[v] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\">  ).reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v[<span class=\"number\">1</span>] &gt;= a[<span class=\"number\">1</span>] ? v : a), [<span class=\"literal\">null</span>, <span class=\"number\">0</span>])[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">mostFrequent([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分辨两个数组的区别不去重\"><a class=\"markdownIt-Anchor\" href=\"#分辨两个数组的区别不去重\">#</a> 分辨两个数组的区别（不去重）</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> difference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !s.has(x));</span><br><span class=\"line\">&#125;;<span class=\"comment\">//找到a数组中b数组中没有的值</span></span><br><span class=\"line\">difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 3]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueSymmetricDifference = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> </span><br><span class=\"line\">[  </span><br><span class=\"line\">    ...new <span class=\"built_in\">Set</span>([    </span><br><span class=\"line\">    ...a.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !b.includes(v)),    </span><br><span class=\"line\">    ...b.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !a.includes(v)), </span><br><span class=\"line\">\t]),</span><br><span class=\"line\">];</span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\">uniqueSymmetricDifference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组的后n个元素\"><a class=\"markdownIt-Anchor\" href=\"#删除数组的后n个元素\">#</a> 删除数组的后 n 个元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去除数组最后一个值 const del = arr =&gt; arr.slice(0, -1);</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dropRight = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> arr.slice(<span class=\"number\">0</span>, -n);</span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">dropRight([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">42</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数组元素直到满足函数\"><a class=\"markdownIt-Anchor\" href=\"#删除数组元素直到满足函数\">#</a> 删除数组元素直到满足函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dropRightWhile = <span class=\"function\">(<span class=\"params\">arr, func</span>) =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightIndex = arr.length;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rightIndex-- &amp;&amp; !func(arr[rightIndex]));  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, rightIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从右往左直到索引大于3</span></span><br><span class=\"line\">dropWhile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n &gt;= <span class=\"number\">3</span>); <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除第一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除第一个元素以外的所有元素\">#</a> 返回数组中除第一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tail = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> (arr.length &gt; <span class=\"number\">1</span> ? arr.slice(<span class=\"number\">1</span>) : arr);</span><br><span class=\"line\">tail([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">tail([<span class=\"number\">1</span>]); <span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中除最后一个元素以外的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中除最后一个元素以外的所有元素\">#</a> 返回数组中除最后一个元素以外的所有元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initial = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">initial([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回数组中每个n元素\"><a class=\"markdownIt-Anchor\" href=\"#返回数组中每个n元素\">#</a> 返回数组中每个 “n” 元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> everyNth = <span class=\"function\">(<span class=\"params\">arr, nth</span>) =&gt;</span> arr.filter(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> i % nth === nth - <span class=\"number\">1</span>);</span><br><span class=\"line\">everyNth([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成n位斐波那契数组\"><a class=\"markdownIt-Anchor\" href=\"#生成n位斐波那契数组\">#</a> 生成 n 位斐波那契数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;).reduce(</span><br><span class=\"line\">   <span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class=\"number\">1</span> ? acc[i - <span class=\"number\">1</span>] + acc[i - <span class=\"number\">2</span>] : i),[])</span><br><span class=\"line\">fibonacci(<span class=\"number\">6</span>); <span class=\"comment\">// [0, 1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定个数的随机数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定个数的随机数组\">#</a> 生成指定个数的随机数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateItems = <span class=\"function\">(<span class=\"params\">n, fn</span>) =&gt;</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: n &#125;, <span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> fn(i));</span><br><span class=\"line\">generateItems(<span class=\"number\">10</span>, <span class=\"built_in\">Math</span>.random);</span><br><span class=\"line\"><span class=\"comment\">// [0.21, 0.08, 0.40, 0.96, 0.96, 0.24, 0.19, 0.96, 0.42, 0.70]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在数组的指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#在数组的指定位置插入多个值返回新数组\">#</a> 在数组的指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arrayObject.splice(index,howmany,item1,.....,itemX)</span></span><br><span class=\"line\"><span class=\"comment\">// index\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span></span><br><span class=\"line\"><span class=\"comment\">// howmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。</span></span><br><span class=\"line\"><span class=\"comment\">// item1, ..., itemX\t可选。向数组添加的新项目。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> insertAt = <span class=\"function\">(<span class=\"params\">arr, i, ...v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  arr.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, ...v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">insertAt(myArray, <span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// myArray = [1, 2, 3, 5, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherArray = [<span class=\"number\">2</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">insertAt(otherArray, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>); <span class=\"comment\">// otherArray = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"指定位置插入多个值返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#指定位置插入多个值返回新数组\">#</a> 指定位置插入多个值，返回新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shank = <span class=\"function\">(<span class=\"params\">arr, index = <span class=\"number\">0</span>, delCount = <span class=\"number\">0</span>, ...elements</span>) =&gt;</span></span><br><span class=\"line\">  arr</span><br><span class=\"line\">    .slice(<span class=\"number\">0</span>, index)</span><br><span class=\"line\">    .concat(elements)</span><br><span class=\"line\">    .concat(arr.slice(index + delCount));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;alpha&#x27;</span>, <span class=\"string\">&#x27;bravo&#x27;</span>, <span class=\"string\">&#x27;charlie&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> namesAndDelta = shank(names, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;delta&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;delta&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> namesNoBravo = shank(names, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// [ &#x27;alpha&#x27;, &#x27;charlie&#x27; ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names); <span class=\"comment\">// [&#x27;alpha&#x27;, &#x27;bravo&#x27;, &#x27;charlie&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数组将生成的数组中的元素解组\"><a class=\"markdownIt-Anchor\" href=\"#创建数组将生成的数组中的元素解组\">#</a> 创建数组，将生成的数组中的元素解组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unzip = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> (val.forEach(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> acc[i].push(v)), acc),</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">      <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.max(...arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.length))</span><br><span class=\"line\">    &#125;).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [])</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>, <span class=\"literal\">false</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true, false]]</span></span><br><span class=\"line\">unzip([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;b&#x27;], [1, 2], [true]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对提供的数组元素排列组合并生成新数组\"><a class=\"markdownIt-Anchor\" href=\"#对提供的数组元素排列组合并生成新数组\">#</a> 对提供的数组元素排列组合并生成新数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xProd = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span></span><br><span class=\"line\">  a.reduce(<span class=\"function\">(<span class=\"params\">acc, x</span>) =&gt;</span> acc.concat(b.map(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> [x, y])), []);</span><br><span class=\"line\">xProd([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]); <span class=\"comment\">// [[1, &#x27;a&#x27;], [1, &#x27;b&#x27;], [2, &#x27;a&#x27;], [2, &#x27;b&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用迭代器函数和初始值构建数组\"><a class=\"markdownIt-Anchor\" href=\"#使用迭代器函数和初始值构建数组\">#</a> 使用迭代器函数和初始值构建数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unfold = <span class=\"function\">(<span class=\"params\">fn, seed</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [],</span><br><span class=\"line\">    val = [<span class=\"literal\">null</span>, seed];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((val = fn(val[<span class=\"number\">1</span>]))) result.push(val[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> (n &gt; <span class=\"number\">50</span> ? <span class=\"literal\">false</span> : [-n, n + <span class=\"number\">10</span>]);</span><br><span class=\"line\">unfold(f, <span class=\"number\">10</span>); <span class=\"comment\">// [-10, -20, -30, -40, -50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象或其他迭代器-创建键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#对象或其他迭代器-创建键值对数组\">#</a> 对象或其他迭代器 创建键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toPairs = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span></span><br><span class=\"line\">  obj[<span class=\"built_in\">Symbol</span>.iterator] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span> &amp;&amp; obj.entries <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Array</span>.from(obj.entries())</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.entries(obj);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toPairs(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]</span></span><br><span class=\"line\">toPairs([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>]); <span class=\"comment\">// [[0, 2], [1, 4], [2, 8]]</span></span><br><span class=\"line\">toPairs(<span class=\"string\">&#x27;shy&#x27;</span>); <span class=\"comment\">// [[&#x27;0&#x27;, &#x27;s&#x27;], [&#x27;1&#x27;, &#x27;h&#x27;], [&#x27;2&#x27;, &#x27;y&#x27;]]</span></span><br><span class=\"line\">toPairs(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>])); <span class=\"comment\">// [[&#x27;a&#x27;, &#x27;a&#x27;], [&#x27;b&#x27;, &#x27;b&#x27;], [&#x27;c&#x27;, &#x27;c&#x27;]]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hsl-值转数组\"><a class=\"markdownIt-Anchor\" href=\"#hsl-值转数组\">#</a> hsl 值转数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toHSLArray = <span class=\"function\"><span class=\"params\">hslStr</span> =&gt;</span> hslStr.match(<span class=\"regexp\">/\\d+/g</span>).map(<span class=\"built_in\">Number</span>);</span><br><span class=\"line\">toHSLArray(<span class=\"string\">&#x27;hsl(50, 10%, 10%)&#x27;</span>); <span class=\"comment\">// [50, 10, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回出现在两个数组中的元素数组\"><a class=\"markdownIt-Anchor\" href=\"#返回出现在两个数组中的元素数组\">#</a> 返回出现在两个数组中的元素数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> similarity = <span class=\"function\">(<span class=\"params\">arr, values</span>) =&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> values.includes(v));</span><br><span class=\"line\">similarity([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打乱数组顺序\"><a class=\"markdownIt-Anchor\" href=\"#打乱数组顺序\">#</a> 打乱数组顺序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shuffle = <span class=\"function\">(<span class=\"params\">[...arr]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> i = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * m--);</span><br><span class=\"line\">    [arr[m], arr[i]] = [arr[i], arr[m]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">shuffle(foo); <span class=\"comment\">// [2, 3, 1], foo = [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"随机得到数组中的值\"><a class=\"markdownIt-Anchor\" href=\"#随机得到数组中的值\">#</a> 随机得到数组中的值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sample = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * arr.length)];</span><br><span class=\"line\">sample([<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>]); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"筛选不满足要求的数组值\"><a class=\"markdownIt-Anchor\" href=\"#筛选不满足要求的数组值\">#</a> 筛选不满足要求的数组值</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">pred, array</span>) =&gt;</span> array.filter(<span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> !pred(...args));</span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [1, 3, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">reject(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.length &gt; <span class=\"number\">4</span>, [<span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"string\">&#x27;Pear&#x27;</span>, <span class=\"string\">&#x27;Kiwi&#x27;</span>, <span class=\"string\">&#x27;Banana&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;Pear&#x27;, &#x27;Kiwi&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成指定范围内的n个随机整数数组\"><a class=\"markdownIt-Anchor\" href=\"#生成指定范围内的n个随机整数数组\">#</a> 生成指定范围内的 “n” 个随机整数数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomIntArrayInRange = <span class=\"function\">(<span class=\"params\">min, max, n = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(</span><br><span class=\"line\">    &#123; <span class=\"attr\">length</span>: n &#125;,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">randomIntArrayInRange(<span class=\"number\">12</span>, <span class=\"number\">35</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\"><span class=\"comment\">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象数组转换为与指定的key对应的值数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象数组转换为与指定的key对应的值数组\">#</a> 将对象数组转换为与指定的 “key” 对应的值数组。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pluck = <span class=\"function\">(<span class=\"params\">arr, key</span>) =&gt;</span> arr.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i[key]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> simpsons = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisa&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;homer&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">36</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;marge&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;bart&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">pluck(simpsons, <span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// [8, 36, 34, 10]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将对象创建为键值对数组\"><a class=\"markdownIt-Anchor\" href=\"#将对象创建为键值对数组\">#</a> 将对象创建为键值对数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectToEntries = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"built_in\">Object</span>.keys(obj).map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class=\"line\">objectToEntries(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;); <span class=\"comment\">// [ [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2] ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组转键值对的对象\"><a class=\"markdownIt-Anchor\" href=\"#数组转键值对的对象\">#</a> 数组转键值对的对象</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objectFromPairs = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">a, [key, val]</span>) =&gt;</span> ((a[key] = val), a), &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">objectFromPairs([[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>], [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>]]); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最小元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最小元素\">#</a> 从提供的数组返回 “n” 个最小元素。</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b).slice(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// [1]</span></span><br><span class=\"line\">minN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从提供的数组返回n个最大元素\"><a class=\"markdownIt-Anchor\" href=\"#从提供的数组返回n个最大元素\">#</a> 从提供的数组返回 “n” 个最大元素</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxN = <span class=\"function\">(<span class=\"params\">arr, n = <span class=\"number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a).slice(<span class=\"number\">0</span>, n);</span><br></pre></td></tr></table></figure>\n<h4 id=\"合并数组并排序\"><a class=\"markdownIt-Anchor\" href=\"#合并数组并排序\">#</a> 合并数组并排序</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mergeSortedArrays = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _a = [...a],</span><br><span class=\"line\">    _b = [...b];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: _a.length + _b.length &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_a.length) <span class=\"keyword\">return</span> _b.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_b.length) <span class=\"keyword\">return</span> _a.shift();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> _a[<span class=\"number\">0</span>] &gt; _b[<span class=\"number\">0</span>] ? _b.shift() : _a.shift();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mergeSortedArrays([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]); <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"查找数组中指定值的所有索引\"><a class=\"markdownIt-Anchor\" href=\"#查找数组中指定值的所有索引\">#</a> 查找数组中指定值的所有索引</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexOfAll = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(<span class=\"function\">(<span class=\"params\">acc, el, i</span>) =&gt;</span> (el === val ? [...acc, i] : acc), []);</span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>); <span class=\"comment\">// [0, 3]</span></span><br><span class=\"line\">indexOfAll([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建等比数组\"><a class=\"markdownIt-Anchor\" href=\"#创建等比数组\">#</a> 创建等比数组</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> equalRatioArr = <span class=\"function\">(<span class=\"params\">end, start = <span class=\"number\">1</span>, step = <span class=\"number\">2</span></span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from(&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.log(end / start) / <span class=\"built_in\">Math</span>.log(step)) + <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;).map(<span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> start * step ** i);</span><br><span class=\"line\"></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>); <span class=\"comment\">// [1, 2, 4, 8, 16, 32, 64, 128, 256]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [3, 6, 12, 24, 48, 96, 192]</span></span><br><span class=\"line\">equalRatioArr(<span class=\"number\">256</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>); <span class=\"comment\">// [1, 4, 16, 64, 256]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"将数组展平到指定的深度\"><a class=\"markdownIt-Anchor\" href=\"#将数组展平到指定的深度\">#</a> 将数组展平到指定的深度</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, depth = <span class=\"number\">1</span></span>) =&gt;</span></span><br><span class=\"line\">  arr.reduce(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span></span><br><span class=\"line\">      a.concat(depth &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Array</span>.isArray(v) ? flatten(v, depth - <span class=\"number\">1</span>) : v),</span><br><span class=\"line\">    []</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>], <span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\">flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">6</span>], <span class=\"number\">7</span>], <span class=\"number\">8</span>], <span class=\"number\">2</span>); <span class=\"comment\">// [1, 2, 3, [4, 5], 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"找到满足条件的指定n个值\"><a class=\"markdownIt-Anchor\" href=\"#找到满足条件的指定n个值\">#</a> 找到满足条件的指定 n 个值</h4>\n<h4 id=\"从前往后\"><a class=\"markdownIt-Anchor\" href=\"#从前往后\">#</a> 从前往后</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findFirstN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.push(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\">findFirstN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从后往前\"><a class=\"markdownIt-Anchor\" href=\"#从后往前\">#</a> 从后往前</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> findLastN = <span class=\"function\">(<span class=\"params\">arr, matcher, n = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = matcher(el, i, arr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) res.unshift(el);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length === n) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [4, 6]</span></span><br><span class=\"line\">findLastN([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> === <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "ES6",
                "数组"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/",
            "url": "https://codingfxj.github.io/2021/06/04/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/",
            "title": "数组扁平化方案",
            "date_published": "2021-06-04T05:36:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"扁平化\"><a class=\"markdownIt-Anchor\" href=\"#扁平化\">#</a> 扁平化</h3>\n<h4 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr3 = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>]</span><br><span class=\"line\">], <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"comment\">//reduce递归</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flatten = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre.concat(<span class=\"built_in\">Array</span>.isArray(cur) ? flatten(cur) : cur)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;flatten(arr3): &#x27;</span>, flatten(arr3));</span><br><span class=\"line\"><span class=\"comment\">//[1, 2, 4, 5, 6, 8, 7, 1, 2, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(arr[i]))&#123;</span><br><span class=\"line\">            fn(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn[i]</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三\"><a class=\"markdownIt-Anchor\" href=\"#方法三\">#</a> 方法三</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten1</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.toString().split(<span class=\"string\">&#x27;,&#x27;</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(item);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四\"><a class=\"markdownIt-Anchor\" href=\"#方法四\">#</a> 方法四</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.join(<span class=\"string\">&#x27;,&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(item);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五\"><a class=\"markdownIt-Anchor\" href=\"#方法五\">#</a> 方法五</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten2</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">            arr = [].concat(...arr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法六\"><a class=\"markdownIt-Anchor\" href=\"#方法六\">#</a> 方法六</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.flat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> res3 = <span class=\"built_in\">JSON</span>.stringify(arr).replace(<span class=\"regexp\">/\\[|\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>)<span class=\"comment\">//会变字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">&#x27;[&#x27;</span>+<span class=\"built_in\">JSON</span>.stringify(arr).replace(<span class=\"regexp\">/\\[|\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>)+<span class=\"string\">&#x27;]&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目一\"><a class=\"markdownIt-Anchor\" href=\"#题目一\">#</a> 题目一</h3>\n<p><strong>将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组</strong></p>\n<blockquote>\n<p>arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10]</p>\n</blockquote>\n<h4 id=\"方法一-2\"><a class=\"markdownIt-Anchor\" href=\"#方法一-2\">#</a> 方法一</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from(new Set(arr.flat(Infinity))).sort((a,b)=&gt;&#123; return a-b&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-2\"><a class=\"markdownIt-Anchor\" href=\"#方法二-2\">#</a> 方法二</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.toString().split(&quot;,&quot;).sort((a,b)=&gt;&#123; return a-b&#125;).map(Number)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-2\"><a class=\"markdownIt-Anchor\" href=\"#方法三-2\">#</a> 方法三</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">           [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">           [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], <span class=\"number\">111</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]]], <span class=\"number\">10</span></span><br><span class=\"line\">       ];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">               arr = [].concat(...arr);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(flatten(arr))).sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四-2\"><a class=\"markdownIt-Anchor\" href=\"#方法四-2\">#</a> 方法四</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].concat(...this.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(item) ? item.flat() : [item])));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...new <span class=\"built_in\">Set</span>(<span class=\"built_in\">this</span>)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortrule = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat().unique().sort(sortrule)); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五-2\"><a class=\"markdownIt-Anchor\" href=\"#方法五-2\">#</a> 方法五</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var old_arr=[ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">// 数组拍平</span><br><span class=\"line\">var level_arr=old_arr.flat(4);</span><br><span class=\"line\"></span><br><span class=\"line\">//数组去重</span><br><span class=\"line\">var Distinct=Array.from(new Set(level_arr));</span><br><span class=\"line\"></span><br><span class=\"line\">// 排序</span><br><span class=\"line\">var sort=  Distinct.sort((a, b) =&gt;a - b)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;new arr&quot;,sort)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JS",
                "数组",
                "扁平化"
            ]
        }
    ]
}