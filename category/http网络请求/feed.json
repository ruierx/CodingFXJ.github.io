{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"http网络请求\" category",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/",
            "url": "https://codingfxj.github.io/2021/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E9%A1%B5%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/",
            "title": "浏览器网页请求过程",
            "date_published": "2021-07-04T07:12:59.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h2 id=\"完整的http请求过程\"><a class=\"markdownIt-Anchor\" href=\"#完整的http请求过程\">#</a> 完整的 HTTP 请求过程</h2>\n<blockquote>\n<p>域名解析 ==&gt;  与服务器建立连接 ==&gt; 发起 HTTP 请求  ==&gt; 服务器响应 HTTP 请求，浏览器得到 html 代码  ==&gt; 浏览器解析 html 代码，并请求 html 代码中的资源（如 js、css、图片） ==&gt; 浏览器对页面进行渲染呈现给用户</p>\n</blockquote>\n<h3 id=\"一-域名解析\"><a class=\"markdownIt-Anchor\" href=\"#一-域名解析\">#</a> 一、域名解析</h3>\n<ol>\n<li>\n<p>Chrome 浏览器 会首先搜索浏览器自身的 DNS 缓存，有且没有过期则解析到此结束。</p>\n</li>\n<li>\n<p>如果浏览器自身的缓存里面没有找到对应的条目，会搜索操作系统自身的 DNS 缓存，有且没有过期则停止搜索解析到此结束</p>\n</li>\n</ol>\n<blockquote>\n<p>Windows 系统：ipconfig /displaydns 命令查看</p>\n</blockquote>\n<ol start=\"3\">\n<li>如果在 Windows 系统的 DNS 缓存也没有找到，则读取 hosts 文件</li>\n</ol>\n<blockquote>\n<p>hosts 位于 ‪C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n</blockquote>\n<ol start=\"4\">\n<li>\n<p>hosts 文件中也没有找到对应的条目，浏览器就会发起一个 DNS 的系统调用，就会向本地配置的首选 DNS 服务器发起域名解析请求</p>\n<p>并返回给 Windows 系统内核，内核又把结果返回给浏览器。（这是递归的请求，也就是运营商的 DNS 服务器必须得提供并返回该域名的 IP 地址）</p>\n</li>\n<li>\n<p>经过以上的 4 个步骤，还没有解析成功</p>\n</li>\n</ol>\n<blockquote>\n<p>注：一般不会进行以下几步</p>\n<p>操作系统就会查找 NetBIOS name Cache == &gt; WINS 服务器 ==&gt; 客户端就要进行广播查找 ==&gt; 客户端就读取 LMHOSTS 文件</p>\n</blockquote>\n<p>如果还没有解析成功，那么就宣告这次解析失败，那就无法跟目标计算机进行通信。只要其中有一步可以解析成功，那就可以成功和目标计算机进行通信。</p>\n<h3 id=\"二-与服务器建立连接\"><a class=\"markdownIt-Anchor\" href=\"#二-与服务器建立连接\">#</a> 二、与服务器建立连接</h3>\n<ol>\n<li>TCP 连接的建立</li>\n</ol>\n<p>客户端的请求到达服务器，首先就是三次握手建立 TCP 连接</p>\n<blockquote>\n<p>三次握手的目的：试探一下对方是否遵循 TCP/IP 协议，为了在不可靠的信道上建立起可靠的连接</p>\n</blockquote>\n<blockquote>\n<p><strong>为什么要进行第三次握手</strong>：为了防止服务器端开启一些无用的连接，增加服务器开销；</p>\n<p>以及防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n</blockquote>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704153259.png\"/>\n<h3 id=\"三-发起http请求\"><a class=\"markdownIt-Anchor\" href=\"#三-发起http请求\">#</a> 三、发起 HTTP 请求</h3>\n<p>http 协议：计算机通过网络进行通信的规则，是一个基于请求与响应，无状态的，应用层的协议，常基于 TCP/IP 协议传输数据。</p>\n<h4 id=\"请求报文结构\"><a class=\"markdownIt-Anchor\" href=\"#请求报文结构\">#</a> 请求报文结构</h4>\n<p>请求报文包括四个部分：请求行，请求头，空行，请求体。</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704155902.png\"/>\n<h3 id=\"四-服务器端响应http请求浏览器得到html代码\"><a class=\"markdownIt-Anchor\" href=\"#四-服务器端响应http请求浏览器得到html代码\">#</a> 四、服务器端响应 HTTP 请求，浏览器得到 HTML 代码</h3>\n<p>HTTP 的响应报文也由四部分组成：响应行、响应头、空行、响应体</p>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704160248.png\"/>\n<p><a href=\"https://blog.csdn.net/lyn_00/article/details/84953763\">报文结构参考</a></p>\n<h3 id=\"五-浏览器解析html代码并请求html代码中的资源\"><a class=\"markdownIt-Anchor\" href=\"#五-浏览器解析html代码并请求html代码中的资源\">#</a> 五、浏览器解析 HTML 代码，并请求 HTML 代码中的资源</h3>\n<ol>\n<li>解析 html 结构，形成 Dom 树</li>\n<li>解析 CSS，生成 cssom</li>\n<li>将 CSS 和 Dom 合并形成 render 树</li>\n<li>计算 layout 布局</li>\n<li>将布局渲染到屏幕上</li>\n</ol>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704162443.png\"/>\n<h3 id=\"六-浏览器对页面进行渲染呈现给用户关闭连接\"><a class=\"markdownIt-Anchor\" href=\"#六-浏览器对页面进行渲染呈现给用户关闭连接\">#</a> 六、浏览器对页面进行渲染呈现给用户，关闭连接</h3>\n<h4 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\">#</a> 四次挥手</h4>\n<img src=\"https://gitee.com/GiteeFXJ/picstore/raw/master/codepic/20210704162253.png\"/>\n<p>问题一：</p>\n<p>为什么连接的时候是三次握手，关闭的时候却是四次握手？</p>\n<blockquote>\n<p>为了保障数据发送完再断开连接</p>\n</blockquote>\n<p>问题二：</p>\n<p>为什么要等待一段时间在关闭连接？</p>\n<blockquote>\n<p>因为客户端发送完 ack 包后中途可能丢失，此时服务端未收到 ack 包会重发 fin 包，客户端在发送 ack 包刷新等待时间，</p>\n<p>确保服务端关闭再 关闭客户端</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1kV411j7hA?from=search&amp;seid=11094337157520488587\">参考视频 1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1BV411a72M?from=search&amp;seid=4937986881420888725\">参考视频 2</a></p>\n",
            "tags": [
                "HTTP网络请求"
            ]
        }
    ]
}